#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi

if ! TEST_VENDOR_DIRECTORY=$(cd "${TEST_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi

if ! MYCMD_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../mycmd" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd lib directory."
    exit 1
fi

function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_project_lib_is_loaded() {
    assertTrue 'Project Lib is loaded' '[ -v _MYCMD_PROJECT_LIB ]'
}

function dummy_function() {
    echo "dummy"
}

# shellcheck disable=SC2016,SC2312
function test_adding_new_tasks() {
    assertTrue '_MYCMD_PROJECT_TASKS is empty' '(( "${#_MYCMD_PROJECT_TASKS[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_FILESETS is empty' '(( "${#_MYCMD_PROJECT_TASK_FILESETS[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENTS is empty' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENTS[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_INDICES is empty' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_INDICES[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS is empty' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS[@]}" == 0 ))'

    project.register_task "Task 1" dummy_function
    assertTrue '_MYCMD_PROJECT_TASKS has a value' '(( "${#_MYCMD_PROJECT_TASKS[@]}" == 1 ))'
    assertTrue '_MYCMD_PROJECT_TASK_FILESETS is empty' '(( "${#_MYCMD_PROJECT_TASK_FILESETS[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENTS is empty' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENTS[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_INDICES is empty' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_INDICES[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS has a value' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS[@]}" == 1 ))'

    local -A task1
    project:task.get_task "Task 1" task1
    assertEquals "Task 1" "$(project:task.get_name task1)"
    assertEquals dummy_function "$(project:task.get_function_name task1)"
    assertTrue 'Function exists for Task 1' 'project:task.function_exists_for_task task1'
    assertEquals 0 "$(project:task.get_argument_count task1)"
    assertFalse 'No argument ref name field is set' 'project:task.get_arguments_ref_name task1'
    assertFalse 'No index field is set' 'project:task.get_argument_index task1'
    assertFalse 'No fileset field is set' 'project:task.get_fileset task1'

    project.register_task "Task 2" dummy_function 1 2 3 4
    assertTrue '_MYCMD_PROJECT_TASKS has two entries' '(( "${#_MYCMD_PROJECT_TASKS[@]}" == 2 ))'
    assertTrue '_MYCMD_PROJECT_TASK_FILESETS is empty' '(( "${#_MYCMD_PROJECT_TASK_FILESETS[@]}" == 0 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENTS has four entries' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENTS[@]}" == 4 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_INDICES has one entry' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_INDICES[@]}" == 1 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS has two entries' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS[@]}" == 2 ))'

    local -A task2
    project:task.get_task "Task 2" task2
    assertEquals "Task 2" "$(project:task.get_name task2)"
    assertEquals dummy_function "$(project:task.get_function_name task2)"
    assertTrue 'Function exists for Task 2' 'project:task.function_exists_for_task task2'
    assertEquals 4 "$(project:task.get_argument_count task2)"
    assertEquals 0 "$(project:task.get_argument_index task2)"
    assertEquals '_MYCMD_PROJECT_TASK_ARGUMENTS' "$(project:task.get_arguments_ref_name task2)"
    assertFalse 'No fileset field is set' 'project:task.get_fileset task2'

    local -a task2_arguments=()
    project:task.get_arguments task2 task2_arguments
    assertTrue 'task2_arguments has four entries' '(( "${#task2_arguments[@]}" == 4 ))'
    assertEquals 1 "${task2_arguments[0]}"
    assertEquals 2 "${task2_arguments[1]}"
    assertEquals 3 "${task2_arguments[2]}"
    assertEquals 4 "${task2_arguments[3]}"

    project.register_fileset adding_new_tasks_test_fileset
    project.register_task_with_fileset "Task 3" dummy_function adding_new_tasks_test_fileset "first one" "second one"
    assertTrue '_MYCMD_PROJECT_TASKS has three entries' '(( "${#_MYCMD_PROJECT_TASKS[@]}" == 3 ))'
    assertTrue '_MYCMD_PROJECT_TASK_FILESETS has one entry' '(( "${#_MYCMD_PROJECT_TASK_FILESETS[@]}" == 1 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENTS has six entries' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENTS[@]}" == 6 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_INDICES has two entries' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_INDICES[@]}" == 2 ))'
    assertTrue '_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS has three entries' '(( "${#_MYCMD_PROJECT_TASK_ARGUMENT_COUNTS[@]}" == 3 ))'

    local -A task3
    project:task.get_task "Task 3" task3
    assertEquals "Task 3" "$(project:task.get_name task3)"
    assertEquals dummy_function "$(project:task.get_function_name task3)"
    assertTrue 'Function exists for Task 3' 'project:task.function_exists_for_task task3'
    assertEquals 2 "$(project:task.get_argument_count task3)"
    assertEquals 4 "$(project:task.get_argument_index task3)"
    assertEquals '_MYCMD_PROJECT_TASK_ARGUMENTS' "$(project:task.get_arguments_ref_name task3)"
    assertEquals 'adding_new_tasks_test_fileset' "$(project:task.get_fileset task3)"

    local -a task3_arguments=()
    project:task.get_arguments task3 task3_arguments
    assertTrue 'task3_arguments has two entries' '(( "${#task3_arguments[@]}" == 2 ))'
    assertEquals "first one" "${task3_arguments[0]}"
    assertEquals "second one" "${task3_arguments[1]}"
}

function oneTimeSetUp() {
    . "${MYCMD_LIB_DIRECTORY}/mycmd-lib"
    mycmd.source_mycmd_lib "project"
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
