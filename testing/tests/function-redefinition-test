#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi
readonly TEST_DIRECTORY

source "${TEST_DIRECTORY}/testing-support-lib"

function test_mycmd_base_loading_lib_is_loaded() {
    assertTrue 'MyCmd Loading Base Lib is loaded' '[ -v _MYCMD_LOADING_BASE_LIB ]'
}

function test_function_redefinition_fails() {
    local -r fn_string='function mycmd.output() { echo "Hello"; }'

    local ret_val=0
    eval "${fn_string}" &>/dev/null || ret_val=$?

    assertEquals 'Attempted redefinition of MyCmd core function fails' 1 "${ret_val}"
}

function test_log_unproected_functions() {
    local -a functions_before=()
    mycmd.capture_unprotected_functions functions_before

    assertNotContains 'new_one not yet in functions_before' "${functions_before[*]}" "new_one"

    local -r fn_string='function new_one() { echo "Hello"; }'
    eval "${fn_string}"

    local -a functions_after=()
    mycmd.capture_unprotected_functions functions_after

    assertContains 'new_one in functions_after' "${functions_after[*]}" "new_one"
}

function oneTimeSetUp() {
    start_tracing

    # shellcheck disable=SC2154 source=../../mycmd/mycmd-loading-base-lib
    . "${MYCMD_LIB_DIRECTORY}/mycmd-loading-base-lib"
}

function oneTimeTearDown() {
    cleanup_tracing
}

# shellcheck disable=SC2154 source=../vendor/shunit2
source "${TEST_VENDOR_DIRECTORY}/shunit2"
