#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi
readonly TEST_DIRECTORY

source "${TEST_DIRECTORY}/testing-support-lib"

function test_mycmd_platform_support_lib_is_loaded() {
    assertTrue 'MyCmd Platform Support Lib is loaded' '[ -v _MYCMD_PLATFORM_SUPPORT_LIB ]'
}

function test_init_bin_works() {
    mycmd.init_bin sed
    assertTrue 'MYCMD_BIN[sed] is defined' '[ -v MYCMD_BIN["sed"] ]'
}

function test_init_bin_no_exit_does_not_exit() {
    set +o errexit
    local result
    result=$(
        mycmd.init_bin_no_exit tbh_does_not_exist
        echo "This should be printed"
    )
    set -o errexit

    assertContains \
        'Expected Output is Printed' \
        "${result}" \
        "This should be printed"
}

function test_init_bin__exits() {
    local result
    result=$(
        mycmd.init_bin tbh_does_not_exist
        echo "This should be not printed"
    )

    assertNotContains \
        'Unexpected Output is not Printed' \
        "${result}" \
        "This should be not printed"
}

# shellcheck disable=SC2154,SC2312
function test_user_config_home() {
    local -r expected_user_config="${MYCMD_TMP_DIRECTORY}/config/mycmd"
    assertEquals "_MYCMD_USER_CONFIG_DIRECTORY is '${expected_user_config}'" \
        "${expected_user_config}" "${_MYCMD_USER_CONFIG_DIRECTORY}"

    local -r config_file="${expected_user_config}/logging/config.json"
    assertEquals "${config_file}" "$(mycmd.get_user_config_file "mycmd/logging" config.json)"
}

# shellcheck disable=SC2154,SC2312
function test_user_cache_home() {
    local -r expected_user_cache="${MYCMD_TMP_DIRECTORY}/cache/mycmd"
    assertEquals "_MYCMD_USER_CACHE_DIRECTORY is '${expected_user_cache}'" \
        "${expected_user_cache}" "${_MYCMD_USER_CACHE_DIRECTORY}"

    local -r cache_file="${expected_user_cache}/logging/cache-file"
    assertEquals "${cache_file}" "$(mycmd.get_user_cache_file "mycmd/logging" cache-file)"
}

function oneTimeSetUp() {
    setup_mycmd_tmp_directory
    start_tracing

    # shellcheck disable=SC2154 source=../../mycmd/mycmd-platform-support-lib
    . "${MYCMD_LIB_DIRECTORY}/mycmd-platform-support-lib"
}

function oneTimeTearDown() {
    cleanup_tracing
}

# shellcheck disable=SC2154 source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
