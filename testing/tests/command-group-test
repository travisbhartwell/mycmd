#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi

if ! TEST_VENDOR_DIRECTORY=$(cd "${TEST_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi

if ! TEST_USER_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../user-base" && pwd -P); then
    echo >&2 "Error fetching test user base directory."
    exit 1
fi

if ! MYCMD_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../mycmd" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd lib directory."
    exit 1
fi

function test_mycmd_command_group_lib_is_loaded() {
    assertTrue 'MyCmd Lib Command Group Support Lib is loaded' '[ -v _MYCMD_COMMAND_GROUP_LIB ]'
}

# shellcheck disable=SC2312
function test_directory_is_command_group() {
    assertTrue "Directory '${MYCMD_LIB_DIRECTORY}' is a command group" \
        "mycmd:command_group.directory_contains_command_group ${MYCMD_LIB_DIRECTORY}"

    assertTrue "Directory '${MYCMD_LIB_DIRECTORY}/shell' is a command group" \
        "mycmd:command_group.directory_contains_command_group ${MYCMD_LIB_DIRECTORY}/shell"

    assertTrue "Directory '${TEST_USER_LIB_DIRECTORY}/shell/extended' is a command group" \
        "mycmd:command_group.directory_contains_command_group ${TEST_USER_LIB_DIRECTORY}/shell/extended"

    assertFalse "Directory '${MYCMD_LIB_DIRECTORY}/foo' is a not command group" \
        "mycmd:command_group.directory_contains_command_group ${MYCMD_LIB_DIRECTORY}/foo"
}

# shellcheck disable=SC2016,SC2034,SC2154,SC2312
function test_base_mycmd_command_group() {
    assertTrue 'mycmd can be loaded as a command group' \
        'mycmd:command_group.register_command_group "${MYCMD_LIB_DIRECTORY}"'

    local -A mycmd_command_group
    mycmd:command_group.get_command_group mycmd mycmd_command_group
    assertEquals "mycmd" "$(mycmd:command_group.get_name mycmd_command_group)"
    assertEquals "mycmd" "$(mycmd:command_group.get_fully_qualified_name mycmd_command_group)"
    assertEquals "mycmd" "$(mycmd:command_group.get_namespaced_parts_as_string mycmd_command_group)"
    assertEquals "${MYCMD_LIB_DIRECTORY}" "$(mycmd:command_group.get_source_directory mycmd_command_group)"
    assertEquals "${MYCMD_LIB_DIRECTORY}/mycmd-lib" "$(mycmd:command_group.get_source_file mycmd_command_group)"
    assertEquals "MyCmd Command Group mycmd" "$(mycmd:command_group.get_short_description mycmd_command_group)"
    assertFalse 'There is no long description defined' \
        'mycmd:command_group.get_long_description mycmd_command_group'
    assertEquals "Unknown" "$(mycmd:command_group.get_version mycmd_command_group)"

    local -a parent_tree
    mycmd:command_group.get_parent_tree mycmd_command_group parent_tree
    assertTrue 'parent_tree has one element' '(( "${#parent_tree[@]}" == 1 ))'
    assertSame 'only element in parent tree is "mycmd"' "${parent_tree[0]}" "mycmd"
}

# shellcheck disable=SC2016,SC2034,SC2154,SC2312
function test_shell_extended_command_group() {
    assertTrue "${MYCMD_LIB_DIRECTORY}/shell can be loaded as a command group" \
        'mycmd:command_group.register_command_group "${MYCMD_LIB_DIRECTORY}/shell"'

    assertTrue "${TEST_USER_LIB_DIRECTORY}/shell/extended can be loaded as a command group" \
        'mycmd:command_group.register_command_group "${TEST_USER_LIB_DIRECTORY}/shell/extended"'

    local -A shell_extended_command_group
    mycmd:command_group.get_command_group "mycmd/shell/extended" shell_extended_command_group
    assertEquals "extended" "$(mycmd:command_group.get_name shell_extended_command_group)"
    assertEquals "mycmd/shell/extended" "$(mycmd:command_group.get_fully_qualified_name shell_extended_command_group)"
    assertEquals "mycmd shell extended" "$(mycmd:command_group.get_namespaced_parts_as_string shell_extended_command_group)"
    assertEquals "${TEST_USER_LIB_DIRECTORY}/shell/extended" "$(mycmd:command_group.get_source_directory shell_extended_command_group)"
    assertEquals "${TEST_USER_LIB_DIRECTORY}/shell/extended/extended-lib" "$(mycmd:command_group.get_source_file shell_extended_command_group)"
    assertEquals "MyCmd Shell Extended Command Group Library" "$(mycmd:command_group.get_short_description shell_extended_command_group)"
    assertEquals "Library for common routines for extended Shell Routines." \
        "$(mycmd:command_group.get_long_description shell_extended_command_group)"
    assertEquals "1.0" "$(mycmd:command_group.get_version shell_extended_command_group)"

    local -a parent_tree
    mycmd:command_group.get_parent_tree shell_extended_command_group parent_tree
    assertTrue 'parent_tree has three elements' '(( "${#parent_tree[@]}" == 3 ))'
    assertSame 'first element in parent tree is "mycmd"' "${parent_tree[0]}" "mycmd"
    assertSame 'second element in parent tree is "mycmd/shell"' "${parent_tree[1]}" "mycmd/shell"
    assertSame 'third element in parent tree is "mycmd/shell/extended"' "${parent_tree[2]}" "mycmd/shell/extended"
}

function oneTimeSetUp() {
    # shellcheck source=../../mycmd/mycmd-command-group-lib
    . "${MYCMD_LIB_DIRECTORY}/mycmd-command-group-lib"
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
