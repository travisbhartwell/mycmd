#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi

if ! TEST_VENDOR_DIRECTORY=$(cd "${TEST_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi

if ! TEST_USER_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../user-base" && pwd -P); then
    echo >&2 "Error fetching test user base directory."
    exit 1
fi

if ! MYCMD_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../mycmd" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd lib directory."
    exit 1
fi

if ! MYCMD_SUPPORT_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../support" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd support directory."
    exit 1
fi

function test_mycmd_registry_lib_is_loaded() {
    assertTrue 'MyCmd Lib Registry Lib is loaded' '[ -v _MYCMD_REGISTRY_LIB ]'
}

# shellcheck disable=SC2154
function test_all_items_are_registered() {
    local -r item_count=13

    assertEquals "There are ${item_count} registered items types." \
        "${item_count}" "${#_MYCMD_ITEM_TYPES[@]}"

    assertEquals "There are ${item_count} registered items with source directories." \
        "${item_count}" "${#_MYCMD_ITEM_SOURCE_DIRECTORIES[@]}"

    assertEquals "There are ${item_count} registered items with source files." \
        "${item_count}" "${#_MYCMD_ITEM_SOURCE_FILE_PATHS[@]}"
}

# shellcheck disable=SC2154
function test_all_command_groups_are_registered() {
    local -r command_group_count=7

    assertEquals "There are ${command_group_count} command groups registered." \
        "${command_group_count}" "${#_MYCMD_COMMAND_GROUPS[@]}"
}

# shellcheck disable=SC2154
function test_all_commands_are_registered() {
    local -r command_count=6

    assertEquals "There are ${command_count} commands registered." \
        "${command_count}" "${#_MYCMD_COMMANDS[@]}"
}

# shellcheck disable=SC2312
function test_directory_is_command_group() {
    assertTrue "Directory '${MYCMD_LIB_DIRECTORY}' is a command group" \
        "mycmd:registry._validate_directory_contains_command_group ${MYCMD_LIB_DIRECTORY}"

    assertTrue "Directory '${MYCMD_LIB_DIRECTORY}/shell' is a command group" \
        "mycmd:registry._validate_directory_contains_command_group ${MYCMD_LIB_DIRECTORY}/shell"

    assertTrue "Directory '${TEST_USER_LIB_DIRECTORY}/shell/extended' is a command group" \
        "mycmd:registry._validate_directory_contains_command_group ${TEST_USER_LIB_DIRECTORY}/shell/extended"

    assertFalse "Directory '${MYCMD_LIB_DIRECTORY}/foo' is a not command group" \
        "mycmd:registry._validate_directory_contains_command_group ${MYCMD_LIB_DIRECTORY}/foo"
}

function test_get_invalid_command_groups() {
    # shellcheck disable=SC2034
    local -A command_group

    assertFalse 'mycmd/invalid-command-group is not a command group' \
        'mycmd:registry.get_command_group "mycmd/invalid-command_group" command_group'

    assertFalse 'mycmd/test-command is a command, not a command group' \
        'mycmd:registry.get_command_group "mycmd/test-command" command_group'
}

# shellcheck disable=SC2034,SC2312
function test_base_mycmd_command_group() {
    local -A mycmd_command_group
    mycmd:registry.get_command_group mycmd mycmd_command_group
    assertTrue 'mycmd is a command group' 'mycmd:command_group.is_command_group mycmd_command_group'
    assertEquals "mycmd" "$(mycmd:command_group.get_name mycmd_command_group)"
    assertEquals "mycmd" "$(mycmd:command_group.get_fully_qualified_name mycmd_command_group)"
    assertEquals "mycmd" "$(mycmd:command_group.get_namespaced_parts_as_string mycmd_command_group)"
    assertEquals "${MYCMD_LIB_DIRECTORY}" "$(mycmd:command_group.get_source_directory mycmd_command_group)"
    assertEquals "${MYCMD_LIB_DIRECTORY}/mycmd-lib" "$(mycmd:command_group.get_source_file_path mycmd_command_group)"
    assertEquals "MyCmd Command Group mycmd" "$(mycmd:command_group.get_short_description mycmd_command_group)"
    assertFalse 'There is no help text defined' \
        'mycmd:command_group.get_help_text mycmd_command_group'
    assertEquals "Unknown" "$(mycmd:command_group.get_version mycmd_command_group)"
}

# shellcheck disable=SC2034,SC2312
function test_shell_extended_command_group() {
    local -A shell_extended_command_group
    mycmd:registry.get_command_group "mycmd/shell/extended" shell_extended_command_group
    assertTrue 'mycmd/shell/extended is a command group' 'mycmd:command_group.is_command_group shell_extended_command_group'
    assertFalse 'mycmd/shell/extended is not a command' 'mycmd:registered_item.is_command shell_extended_command_group'
    assertEquals "extended" "$(mycmd:command_group.get_name shell_extended_command_group)"
    assertEquals "mycmd/shell/extended" "$(mycmd:command_group.get_fully_qualified_name shell_extended_command_group)"
    assertEquals "mycmd shell extended" "$(mycmd:command_group.get_namespaced_parts_as_string shell_extended_command_group)"
    assertEquals "${TEST_USER_LIB_DIRECTORY}/shell/extended" "$(mycmd:command_group.get_source_directory shell_extended_command_group)"
    assertEquals "${TEST_USER_LIB_DIRECTORY}/shell/extended/extended-lib" "$(mycmd:command_group.get_source_file_path shell_extended_command_group)"
    assertEquals "MyCmd Command Group shell extended" "$(mycmd:command_group.get_short_description shell_extended_command_group)"
    assertFalse 'There is no help text defined.' \
        'mycmd:command_group.get_help_text shell_extended_command_group'
    assertEquals "Unknown" "$(mycmd:command_group.get_version shell_extended_command_group)"
}

# shellcheck disable=SC2016,SC2154
function test_file_is_command() {
    assertFalse "${TEST_DIRECTORY}/../../mycmd/project/run is not absolute and not a command" \
        'mycmd:registry._file_is_command "${TEST_DIRECTORY}/../../mycmd/project/run"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/mycmd-lib is not executable and not a command" \
        'mycmd:registry._file_is_command "${MYCMD_LIB_DIRECTORY}/mycmd-lib"'

    assertFalse "${MYCMD_SUPPORT_DIRECTORY}/setup-dev-environment.sh is not on the search path and not a command" \
        'mycmd:registry._file_is_command "${MYCMD_SUPPORT_DIRECTORY}/setup-dev-environment.sh"'

    assertTrue "${MYCMD_LIB_DIRECTORY}/project/run is a command" \
        'mycmd:registry._file_is_command "${MYCMD_LIB_DIRECTORY}/project/run"'

    assertTrue "${MYCMD_USER_BASE_DIR}/test-command is a command" \
        'mycmd:registry._file_is_command "${MYCMD_USER_BASE_DIR}/test-command"'
}

function test_get_invalid_commands() {
    # shellcheck disable=SC2034
    local -A command

    assertFalse 'mycmd/invalid-command is not a command' \
        'mycmd:registry.get_command "mycmd/invalid-command" command'

    assertFalse 'mycmd/project is a command group, not a command' \
        'mycmd:registry.get_command "mycmd/project" command'
}

# shellcheck disable=SC2034,SC2312
function test_test-command() {
    local -A command
    mycmd:registry.get_command "mycmd/test-command" command
    assertTrue 'mycmd/test-command is a command' 'mycmd:command.is_command command'
    assertEquals "test-command" "$(mycmd:command.get_name command)"
    assertEquals "mycmd/test-command" "$(mycmd:command.get_fully_qualified_name command)"
    assertEquals "mycmd test-command" "$(mycmd:command.get_namespaced_parts_as_string command)"
    assertEquals "${MYCMD_USER_BASE_DIR}" "$(mycmd:command.get_source_directory command)"
    assertEquals "${MYCMD_USER_BASE_DIR}/test-command" "$(mycmd:command.get_source_file_path command)"
    assertEquals "MyCmd Command test-command" "$(mycmd:command.get_short_description command)"
    assertFalse 'No help text is defined' \
        'mycmd:command.get_help_text command'
    assertEquals "Unknown" "$(mycmd:command.get_version command)"
}

function oneTimeSetUp() {
    # shellcheck source=../../mycmd/mycmd-registry-lib
    . "${MYCMD_LIB_DIRECTORY}/mycmd-registry-lib"

    mycmd:registry.discover_command_groups_and_commands
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
