#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi
readonly TEST_DIRECTORY

source "${TEST_DIRECTORY}/testing-support-lib"

if ! MYCMD_SUPPORT_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../support" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd support directory."
    exit 1
fi

function test_mycmd_registry_lib_is_loaded() {
    assertTrue 'MyCmd Lib Registry Lib is loaded' '[ -v _MYCMD_REGISTRY_LIB ]'
}

# shellcheck disable=SC2154
function test_all_items_are_registered() {
    local -r item_count=13

    assertEquals "There are ${item_count} registered items types." \
        "${item_count}" "${#_MYCMD_ITEM_TYPES[@]}"
    assertEquals "There are ${item_count} registered items with source directories." \
        "${item_count}" "${#_MYCMD_ITEM_SOURCE_DIRECTORIES[@]}"
    assertEquals "There are ${item_count} registered items with source files." \
        "${item_count}" "${#_MYCMD_ITEM_SOURCE_FILE_PATHS[@]}"

    # The top-level 'mycmd' command group doesn't have a parent command group
    local -r parent_command_group_count=12
    assertEquals "There are ${parent_command_group_count} registered items with parent command groups." \
        "${parent_command_group_count}" "${#_MYCMD_ITEM_PARENT_COMMAND_GROUPS[@]}"

    # Since metadata for items is only loaded on demand, except for the top-level mycmd group, this should be 1
    local -r help_and_version_count=1
    assertEquals "There are ${help_and_version_count} items with registered short descriptions" \
        "${help_and_version_count}" "${#_MYCMD_ITEM_SHORT_DESCRIPTIONS[@]}"
    assertEquals "There are ${help_and_version_count} items with registered help text" \
        "${help_and_version_count}" "${#_MYCMD_ITEM_HELP_TEXTS[@]}"
    assertEquals "There are ${help_and_version_count} items with registerd versions" \
        "${help_and_version_count}" "${#_MYCMD_ITEM_VERSIONS[@]}"
    assertEquals "There are ${help_and_version_count} items with metadata loaded" \
        "${help_and_version_count}" "${#_MYCMD_ITEM_METADATA_LOADED[@]}"
}

# shellcheck disable=SC2154
function test_all_command_groups_are_registered() {
    local -r command_group_count=7

    assertEquals "There are ${command_group_count} command groups registered." \
        "${command_group_count}" "${#_MYCMD_COMMAND_GROUPS[@]}"
}

# shellcheck disable=SC2154
function test_all_commands_are_registered() {
    local -r command_count=6

    assertEquals "There are ${command_count} commands registered." \
        "${command_count}" "${#_MYCMD_COMMANDS[@]}"
}

# shellcheck disable=SC2312,SC2154
function test_directory_is_command_group() {
    assertTrue "Directory '${MYCMD_LIB_DIRECTORY}' is a command group" \
        "mycmd:registry._validate_directory_contains_command_group ${MYCMD_LIB_DIRECTORY}"

    assertTrue "Directory '${MYCMD_LIB_DIRECTORY}/shell' is a command group" \
        "mycmd:registry._validate_directory_contains_command_group ${MYCMD_LIB_DIRECTORY}/shell"

    assertTrue "Directory '${TEST_USER_LIB_DIRECTORY}/shell/extended' is a command group" \
        "mycmd:registry._validate_directory_contains_command_group ${TEST_USER_LIB_DIRECTORY}/shell/extended"

    assertFalse "Directory '${MYCMD_LIB_DIRECTORY}/foo' is a not command group" \
        "mycmd:registry._validate_directory_contains_command_group ${MYCMD_LIB_DIRECTORY}/foo"
}

# shellcheck disable=SC2312
function test_get_command_group_from_file() {
    assertFalse "Directory '${MYCMD_LIB_DIRECTORY}/project/run' is not a command group library or command group support library file" \
        "mycmd:registry.get_command_group_from_file ${MYCMD_LIB_DIRECTORY}/project/run"

    assertEquals "'${MYCMD_LIB_DIRECTORY}/project/project-lib' returns 'mycmd/project'" \
        "mycmd/project" "$(mycmd:registry.get_command_group_from_file "${MYCMD_LIB_DIRECTORY}/project/project-lib")"

    assertEquals "'${MYCMD_LIB_DIRECTORY}/project/project-git-lib' returns 'mycmd/project'" \
        "mycmd/project" "$(mycmd:registry.get_command_group_from_file "${MYCMD_LIB_DIRECTORY}/project/project-git-lib")"
}

function test_get_invalid_command_groups() {
    # shellcheck disable=SC2034
    local -A command_group

    assertFalse 'mycmd/invalid-command-group is not a command group' \
        'mycmd:registry.get_command_group "mycmd/invalid-command_group" command_group'

    assertFalse 'mycmd/test-command is a command, not a command group' \
        'mycmd:registry.get_command_group "mycmd/test-command" command_group'
}

# shellcheck disable=SC2016,SC2154
function test_file_is_command() {
    assertFalse "${TEST_DIRECTORY}/../../mycmd/project/run is not absolute and not a command" \
        'mycmd:registry._file_is_command "${TEST_DIRECTORY}/../../mycmd/project/run"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/mycmd-lib is not executable and not a command" \
        'mycmd:registry._file_is_command "${MYCMD_LIB_DIRECTORY}/mycmd-lib"'

    assertFalse "${MYCMD_SUPPORT_DIRECTORY}/setup-dev-environment.sh is not on the search path and not a command" \
        'mycmd:registry._file_is_command "${MYCMD_SUPPORT_DIRECTORY}/setup-dev-environment.sh"'

    assertTrue "${MYCMD_LIB_DIRECTORY}/project/run is a command" \
        'mycmd:registry._file_is_command "${MYCMD_LIB_DIRECTORY}/project/run"'

    assertTrue "${MYCMD_USER_BASE_DIR}/test-command is a command" \
        'mycmd:registry._file_is_command "${MYCMD_USER_BASE_DIR}/test-command"'
}

function test_get_invalid_commands() {
    # shellcheck disable=SC2034
    local -A command

    assertFalse 'mycmd/invalid-command is not a command' \
        'mycmd:registry.get_command "mycmd/invalid-command" command'

    assertFalse 'mycmd/project is a command group, not a command' \
        'mycmd:registry.get_command "mycmd/project" command'
}

function oneTimeSetUp() {
    setup_test_user_lib_directory
    start_tracing

    # shellcheck disable=SC2154 source=../../mycmd/mycmd-registry-lib
    . "${MYCMD_LIB_DIRECTORY}/mycmd-registry-lib"

    # This will be called in mycmd-lib normally
    mycmd:registry.discover_command_groups_and_commands
    mycmd:registry.register_mycmd_help_and_version \
        "MyCmd Short Description" \
        "This is a help\nMessage" \
        "0.1"
}

# shellcheck disable=SC2154 source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
