#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash disable=SC2317

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi

if ! TEST_VENDOR_DIRECTORY=$(cd "${TEST_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi

if ! TEST_USER_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../user-base" && pwd -P); then
    echo >&2 "Error fetching test user base directory."
    exit 1
fi

if ! MYCMD_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../mycmd" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd lib directory."
    exit 1
fi

if ! MYCMD_TMP_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../tmp" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd tmp directory."
    exit 1
fi

function test_mycmd_pathname_lib_is_loaded() {
    assertTrue 'MyCmd Pathname Support Lib is loaded' '[ -v _MYCMD_PATHNAME_LIB ]'
}

# shellcheck disable=SC2016
function test_is_valid_absolute_path() {
    assertFalse '../../mycmd/mycmd-pathname-lib is not absolute' \
        'mycmd:pathname.is_valid_absolute_path ../../mycmd/mycmd-pathname-lib'

    assertFalse "${MYCMD_LIB_DIRECTORY}/../mycmd is not absolute" \
        'mycmd:pathname.is_valid_absolute_path "${MYCMD_LIB_DIRECTORY}/../mycmd"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/non-existing is absolute, but doesn't exist" \
        'mycmd:pathname.is_valid_absolute_path "${MYCMD_LIB_DIRECTORY}/non-existing"'

    assertTrue "${MYCMD_LIB_DIRECTORY}/mycmd-lib is absolute and exists" \
        'mycmd:pathname.is_valid_absolute_path "${MYCMD_LIB_DIRECTORY}/mycmd-lib"'
}

# shellcheck disable=SC2016
function test_mycmd_pathname_lib_is_loaded() {
    assertFalse '../../mycmd is not an absolute path' \
        'mycmd:pathname.is_valid_absolute_path_of_directory ../../mycmd'

    assertFalse "${MYCMD_LIB_DIRECTORY}/../mycmd is not an absolute path" \
        'mycmd:pathname.is_valid_absolute_path_of_directory "${MYCMD_LIB_DIRECTORY}/../mycmd"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/non-existing is absolute, but doesn't exist" \
        'mycmd:pathname.is_valid_absolute_path_of_directory "${MYCMD_LIB_DIRECTORY}/non-existing"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/mycmd-lib is absolute and exists, but not a directory" \
        'mycmd:pathname.is_valid_absolute_path_of_directory "${MYCMD_LIB_DIRECTORY}/mycmd-lib"'

    assertTrue "${MYCMD_LIB_DIRECTORY} is absolute and exists and a directory" \
        'mycmd:pathname.is_valid_absolute_path_of_directory "${MYCMD_LIB_DIRECTORY}"'
}

# shellcheck disable=SC2016,SC2312
function test_path_relative_to_directory() {
    assertFalse '../../mycmd is not an absolute path' \
        'mycmd:pathname.path_relative_to_directory ../../mycmd "${MYCMD_LIB_DIRECTORY}"'

    assertFalse '${MYCMD_LIB_DIRECTORY}/non-existing does not exist' \
        'mycmd:pathname.path_relative_to_directory "${MYCMD_LIB_DIRECTORY}/non-existing" "${MYCMD_LIB_DIRECTORY}"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/../mycmd is not an absolute path" \
        'mycmd:pathname.path_relative_to_directory "${TEST_DIRECTORY}" "${MYCMD_LIB_DIRECTORY}/../mycmd"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/non-existing does not exist" \
        'mycmd:pathname.path_relative_to_directory "${TEST_DIRECTORY}" "${MYCMD_LIB_DIRECTORY}/non-existing"'

    assertFalse "${TEST_DIRECTORY} is not relative to ${MYCMD_LIB_DIRECTORY}" \
        'mycmd:pathname.path_relative_to_directory "${TEST_DIRECTORY}" "${MYCMD_LIB_DIRECTORY}"'

    assertEquals "project" \
        "$(mycmd:pathname.path_relative_to_directory "${MYCMD_LIB_DIRECTORY}/project" "${MYCMD_LIB_DIRECTORY}")"
}

# shellcheck disable=SC2016
function test_is_path_relative_to_directory() {
    assertFalse '../../mycmd is not an absolute path' \
        'mycmd:pathname.is_path_relative_to_directory ../../mycmd "${MYCMD_LIB_DIRECTORY}"'

    assertFalse '${MYCMD_LIB_DIRECTORY}/non-existing does not exist' \
        'mycmd:pathname.is_path_relative_to_directory "${MYCMD_LIB_DIRECTORY}/non-existing" "${MYCMD_LIB_DIRECTORY}"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/../mycmd is not an absolute path" \
        'mycmd:pathname.is_path_relative_to_directory "${TEST_DIRECTORY}" "${MYCMD_LIB_DIRECTORY}/../mycmd"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/non-existing does not exist" \
        'mycmd:pathname.is_path_relative_to_directory "${TEST_DIRECTORY}" "${MYCMD_LIB_DIRECTORY}/non-existing"'

    assertFalse "${TEST_DIRECTORY} is not relative to ${MYCMD_LIB_DIRECTORY}" \
        'mycmd:pathname.is_path_relative_to_directory "${TEST_DIRECTORY}" "${MYCMD_LIB_DIRECTORY}"'

    assertTrue "${MYCMD_LIB_DIRECTORY}/project is relative to ${MYCMD_LIB_DIRECTORY}" \
        'mycmd:pathname.is_path_relative_to_directory "${MYCMD_LIB_DIRECTORY}/project" "${MYCMD_LIB_DIRECTORY}"'
}

# shellcheck disable=SC2016
function test_is_child_of_mycmd_path_directory() {
    assertFalse "${MYCMD_LIB_DIRECTORY}/mycmd-pathname-lib is not an absolute path to a directory" \
        'mycmd:pathname.is_child_of_mycmd_path_directory "${MYCMD_LIB_DIRECTORY}/mycmd-pathname-lib"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/non-existing does not exist" \
        'mycmd:pathname.is_child_of_mycmd_path_directory "${MYCMD_LIB_DIRECTORY}/non-existing"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/../mycmd is not absolute" \
        'mycmd:pathname.is_child_of_mycmd_path_directory "${MYCMD_LIB_DIRECTORY}/../mycmd"'

    assertFalse "/tmp is not a child of a MyCmd path directory" \
        'mycmd:pathname.is_child_of_mycmd_path_directory /tmp'

    assertTrue "${MYCMD_LIB_DIRECTORY}/project is a child of a MyCmd path directory" \
        'mycmd:pathname.is_child_of_mycmd_path_directory "${MYCMD_LIB_DIRECTORY}/project"'

    assertTrue "${TEST_USER_LIB_DIRECTORY}/test-command-group is a child of a MyCmd path directory" \
        'mycmd:pathname.is_child_of_mycmd_path_directory "${TEST_USER_LIB_DIRECTORY}/test-command-group"'
}

# shellcheck disable=SC2016,SC2312
function test_fully_qualified_name_for_path() {
    assertFalse "${MYCMD_LIB_DIRECTORY}/mycmd-pathname-lib is not an absolute path to a directory" \
        'mycmd:pathname.fully_qualified_name_for_path "${MYCMD_LIB_DIRECTORY}/mycmd-pathname-lib"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/non-existing does not exist" \
        'mycmd:pathname.fully_qualified_name_for_path "${MYCMD_LIB_DIRECTORY}/non-existing"'

    assertFalse "${MYCMD_LIB_DIRECTORY}/../mycmd is not absolute" \
        'mycmd:pathname.fully_qualified_name_for_path "${MYCMD_LIB_DIRECTORY}/../mycmd"'

    assertFalse "/tmp is not a child of a MyCmd path directory" \
        'mycmd:pathname.fully_qualified_name_for_path /tmp'

    assertEquals "mycmd/project" \
        "$(mycmd:pathname.fully_qualified_name_for_path "${MYCMD_LIB_DIRECTORY}/project")"

    assertEquals "mycmd/test-command-group" \
        "$(mycmd:pathname.fully_qualified_name_for_path "${TEST_USER_LIB_DIRECTORY}/test-command-group")"

    assertEquals "mycmd" \
        "$(mycmd:pathname.fully_qualified_name_for_path "${MYCMD_LIB_DIRECTORY}")"
}

declare -Agx walk_path_dir_counts=()
declare -Agx walk_path_file_counts=()

# shellcheck disable=SC2016
function callback() {
    local -r full_path="${1}"
    local -r fully_qualifed_name="${2}"
    local -n dirs_ref="${3}"
    local -n files_ref="${4}"

    local -r key="${full_path}:${fully_qualifed_name}"
    walk_path_dir_counts["${key}"]=${#dirs_ref[@]}
    walk_path_file_counts["${key}"]=${#files_ref[@]}

    if [[ ! -v MYCMD_TEST_LOGGING ]]; then
        return 0
    fi

    echo "Received callback for '${full_path}' with fully-qualified name '${fully_qualifed_name}'." >>"${MYCMD_TMP_DIRECTORY}"/callback.log
    echo "Found ${#dirs_ref[@]} directories and ${#files_ref[@]} files." >>"${MYCMD_TMP_DIRECTORY}"/callback.log

    local d
    for d in "${dirs_ref[@]}"; do
        echo "Directory: ${d}" >>"${MYCMD_TMP_DIRECTORY}"/callback.log
    done

    local f
    for f in "${files_ref[@]}"; do
        echo "File: ${f}" >>"${MYCMD_TMP_DIRECTORY}"/callback.log
    done

    return 0
}

# shellcheck disable=SC2016
function test_walk_path() {
    walk_path_dir_counts=()
    walk_path_file_counts=()

    assertTrue 'walk_path runs successfully' \
        'mycmd:pathname.walk_path "mycmd" callback'

    local key
    for key in "${!TEST_WALK_PATH_DIR_COUNTS[@]}"; do
        assertEquals "Directory count for ${key}" \
            "${TEST_WALK_PATH_DIR_COUNTS[${key}]}" \
            "${walk_path_dir_counts[${key}]}"
    done

    assertTrue 'The expected number of keys were found in directory counts' \
        '[ "${#TEST_WALK_PATH_DIR_COUNTS[@]}" -eq "${#walk_path_dir_counts[@]}" ]'

    for key in "${!TEST_WALK_PATH_FILE_COUNTS[@]}"; do
        assertEquals "File count for ${key}" \
            "${TEST_WALK_PATH_FILE_COUNTS[${key}]}" \
            "${walk_path_file_counts[${key}]}"
    done

    assertTrue 'The expected number of keys were found in file counts' \
        '[ "${#TEST_WALK_PATH_FILE_COUNTS[@]}" -eq "${#walk_path_file_counts[@]}" ]'
}

declare -Agx TEST_WALK_PATH_DIR_COUNTS=()
declare -Agx TEST_WALK_PATH_FILE_COUNTS=()

# shellcheck disable=SC2034
function oneTimeSetUp() {
    # shellcheck source=../../mycmd/mycmd-pathname-lib
    . "${MYCMD_LIB_DIRECTORY}/mycmd-pathname-lib"

    # Hard-code values for tests
    TEST_WALK_PATH_DIR_COUNTS["${MYCMD_LIB_DIRECTORY}:mycmd"]=4
    TEST_WALK_PATH_FILE_COUNTS["${MYCMD_LIB_DIRECTORY}:mycmd"]=0
    TEST_WALK_PATH_DIR_COUNTS["${MYCMD_LIB_DIRECTORY}/logging:mycmd/logging"]=0
    TEST_WALK_PATH_FILE_COUNTS["${MYCMD_LIB_DIRECTORY}/logging:mycmd/logging"]=3
    TEST_WALK_PATH_DIR_COUNTS["${MYCMD_LIB_DIRECTORY}/project:mycmd/project"]=0
    TEST_WALK_PATH_FILE_COUNTS["${MYCMD_LIB_DIRECTORY}/project:mycmd/project"]=2
    TEST_WALK_PATH_DIR_COUNTS["${TEST_USER_LIB_DIRECTORY}:mycmd"]=2
    TEST_WALK_PATH_FILE_COUNTS["${TEST_USER_LIB_DIRECTORY}:mycmd"]=1
    TEST_WALK_PATH_DIR_COUNTS["${TEST_USER_LIB_DIRECTORY}/shell:mycmd/shell"]=1
    TEST_WALK_PATH_FILE_COUNTS["${TEST_USER_LIB_DIRECTORY}/shell:mycmd/shell"]=0
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
