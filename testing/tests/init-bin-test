#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

if ! TEST_DIRECTORY=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test directory."
    exit 1
fi

if ! TEST_VENDOR_DIRECTORY=$(cd "${TEST_DIRECTORY}/../vendor" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching test vendor directory."
    exit 1
fi

if ! MYCMD_LIB_DIRECTORY=$(cd "${TEST_DIRECTORY}/../../mycmd" &>/dev/null && pwd -P); then
    echo >&2 "Error fetching MyCmd lib directory."
    exit 1
fi

function test_mycmd_lib_is_loaded() {
    assertTrue 'MyCmd Lib is loaded' '[ -v _MYCMD_LIB ]'
}

function test_init_bin_works() {
    mycmd.init_bin sed
    assertTrue 'MYCMD_BIN[sed] is defined' '[ -v MYCMD_BIN["sed"] ]'
}

function test_init_bin_no_exit_does_not_exit() {
    set +o errexit
    local result
    result=$(
        mycmd.init_bin_no_exit tbh_does_not_exist
        echo "This should be printed"
    )
    set -o errexit

    assertContains \
        'Expected Output is Printed' \
        "${result}" \
        "This should be printed"
}

function test_init_bin__exits() {
    local result
    result=$(
        mycmd.init_bin tbh_does_not_exist
        echo "This should be not printed"
    )

    assertNotContains \
        'Unexpected Output is not Printed' \
        "${result}" \
        "This should be not printed"
}

function oneTimeSetUp() {
    . "${MYCMD_LIB_DIRECTORY}/mycmd-lib"
}

# shellcheck source=../vendor/shunit2
. "${TEST_VENDOR_DIRECTORY}/shunit2"
