#+title: Mycmd Planning

* Milestones
** 0.1 Release

This will be the release with full CI working.

*** Clean Up and Conventions
**** General Coding Standards and Conventions
***** TODO Update[[file:mycmd-concepts-and-conventions.org][ MyCmd Concepts and Conventions]] with full coding standards sufficient for contributors to understand my style and standards
***** TODO Finalize coding standards and fix any breakage
***** TODO Audit all code to classify functions as
****** File Private Functions
****** File Public but MyCmd Internal Functions
****** Public Functions
**** Logging and Error Handling Standards
***** TODO Evaluate all uses of =mycmd.debug=, =mycmd.trace=, and =mycmd.log=. Define a standard of when to use what and update things to match.

**** General Code Quality
***** TODO Evaluate if there is a way to ensure class invariants, i.e. the parallel assoc arrays are in sync
***** TODO Audit support library loading

*** Continuous Integration
**** Goals
***** Use =mycmd= and =mycmd/project= to build itself in GitHub Actions
***** Tests and Linters Running in GitHub Actions
***** Pull Request workflow configured with GitHub Actions
***** Main Pull Request merge actions that creates snapshot tags
**** Tasks
***** TODO Gather links to GHA documentation and examples
***** TODO Find out what software is available in GHA images
***** TODO Document all software needed to run full release and testing
***** TODO Figure out what will be needed from Mise

*** Documentation
**** Code Comments and Documentation
***** Audit each implementation source file and do the following:
****** TODO Create TODO for each public function that needs documented
****** TODO For each concept, decide what should be inline in code comments and what should be in [[file:mycmd-concepts-and-conventions.org][ MyCmd Concepts and Conventions]]
****** TODO Create TODO for each concept that needs documented (such as the Registry)

***** Add needed code documentation
****** TODO Add documentation comments for the registry
****** TODO Clean up documentation comments for Command Groups
****** TODO Clean up documentation comments for Commands

**** Documentation Mechanics
***** TODO Explore [[https://docs.grit.io/language/overview][GritQL]] as potential for generating docs
***** TODO Experiment with quick-n-dirty script with =grep=, =sed=, etc to extract and generate Markdown docs
***** TODO Figure out how to deploy documentation parallel to the development log

**** End User Documentation
***** DONE Create placeholder Markdown end user documentation file in the =docs= folder
***** TODO Write outline for end user documentation

**** Command Group and Command Author Documentation
***** DONE Create placeholder Markdown author documentation file in the =docs= folder
***** TODO Write outline for author documentation

**** Release Announcement
***** TODO Take notes on details to add to release announcement
***** TODO Make notes of demos to create
***** TODO Choose tool to generate demo GIFs or MP4s
***** TODO Generate demo GIFs
***** TODO Write script for YouTube release announcement video
***** TODO Record Youtube release announcement video
***** TODO Write release announcement post

*** Features and Bugs

**** Cross Platform Support
***** TODO Freewrite design ideas for all-at-once =mycmd.init_bin=
***** TODO Fix =mycmd.init_bin= to work all at once
***** TODO Audit the project code and catalog external dependencies required (GNU coreutils, etc)
***** Platform Standard User Directories Support
****** DONE Implement Mac OS user configuration directory =~/Library/Application Support/mycmd=
****** DONE Implement Mac OS user caches directory =~/Library/Caches/mycmd=
****** DONE Implement Linux user configuration directory =~/.config/mycmd= or =XDG_CONFIG_HOME=
****** DONE Implement Linux user caches directory =~/.cache/mycmd= or =XDG_CACHE_HOME=
****** DONE Implement get named configuration file for command group or command
****** DONE Implement get named cache file for command group or command
****** DONE Implement mechanism for testing to override user directory locations

**** =mycmd/create= Command Group
***** TODO Freewrite features needed for =mycmd/create=
***** TODO Explore how =envsubst= works for variables you don't want expanded
***** TODO Implement =mycmd create new-command-group=
***** TODO Implement =mycmd create new-command-group-support-lib=
***** TODO Implement =mycmd create new-command=

**** Bash Required Features Detection
***** TODO Audit the project code and catalog Bash features required
***** TODO Look at Bash changelog for when features were added
***** TODO Find Oils post with info about feature detection
***** TODO Implement feature detection for Bash version requirements

**** Log File Handling
***** DONE =mycmd/logging= works correctly on Mac OS and Linux
***** TODO Audit all places where creating a file could fail and make tasks to fix
***** TODO Gracefully handle inability to create log files
***** TODO Audit =mycmd/logging= code for required updates

**** Formatted Output
***** TODO Potentially support more than two columns in =mycmd.print_table=
***** TODO Allow using =mycmd.debug= and =mycmd.trace= instead of =mycmd.output= for table output

**** Metadata Caching and Loading
***** TODO Freewrite metadata cache design and ideas
***** TODO Implement Metadata cache for command groups and commands

**** Command Group and Command Testing
***** TODO Freewrite about potential tools and patterns for testing commands and command groups
***** TODO Add ability to capture the output of the =mycmd-output-lib= functions for testing

**** Pathname Handling
***** TODO Handle strings with un-expanded =~=

**** Item Registry
***** TODO =mycmd:registry._get_item= should unset blank fields if set in case array is being re-used

**** Help Functions
***** TODO Implement =mycmd.print_command_help= or something similar

*** Installation
**** Installation Instructions
***** DONE Create placeholder Markdown installation documentation file in the =docs= folder
***** TODO Write outline of installation instructions
***** TODO Add brief section to [[file:~/Developer/Personal/mycmd/main/README.md][README]] with install instructions and link to detailed documentation
***** TODO Document required dependencies

**** TODO Installation Shell Script
***** TODO Implement feature detection for Bash version requirements for install script
***** TODO Implement external dependency detection for install script
***** TODO Implement installing from release
***** TODO Implement installing from Git checkout (branch, snapshot, or HEAD)

*** Interactive Shell Integration
**** =mycmd/shell= Command Group for shell integration
***** TODO Freewrite about design and requirements for =mycmd/shell= Command Group

**** Completion Support
***** Goals
****** Have a =--completion= parameter to =mycmd= that outputs metadata for completion
****** Implement specific completion for each shell that interprets that metadata
***** Tasks
****** TODO Explore tools that generate completion for multiple shells to figure out commonality
****** TODO Implement Zsh completion support
****** TODO Implement Bash completion support
****** TODO Implement Fish completion support

*** Project Task Runner
**** TODO Separate =mycmd/project= into its own project
**** TODO Out of band =myproject= files for work projects
**** TODO =project.find_files_for_filset= should be additive
**** TODO =project.find_files_for_filset= should support symlinks and files with spaces in them

*** Project Tasks
**** Support all development and support file types
***** TODO Fix =myproject= filesets to handle non-shell files
***** TODO Add linting and formatting tasks for Python files

**** Project Metrics
***** TODO Get a better source code line counter integrated

**** Project Development Environment
***** TODO Get local git hooks set up and working

**** Testing
***** TODO Use log rotation for MyCmd test logs

** Post 0.1 Release
*** TODO Rewrite =mycmd/sessions= into its own project
*** TODO Figure out Test Coverage
*** TODO Better support for executing commands and =mycmd/project= tasks in Emacs with something outside my own dotfiles
*** TODO Providing packages for MyCmd for package managers
*** TODO Potentially own Homebrew tap for installing with Homebrew
*** TODO Mise plugin for MyCmd?
*** TODO Support for custom completion for commands
*** TODO Add MyCmd to [[https://github.com/oils-for-unix/oils/wiki/The-Biggest-Shell-Programs-in-the-World][The Biggest Shell Programs in the World]]

* Side Quests
** =bashdoc=

Build [[https://github.com/travisbhartwell/bashdoc][bashdoc]] to generate API docs for the public APIs that MyCmd command group and command writers will use.

** Internal Dependency Analysis and Linting

Write tools to analysis the dependencies between the different MyCmd support libraries to:
- minimize the functions to just those needed
- each support library only loads the libraries it needs
- there are no circular dependencies

This could include:
- a linter
- visualization of dependencies with graphviz
- call graphs

** General Linters

I should establish strict naming conventions for functions and variables and then implement linters to ensure that I keep to those standards.

Also, I should see if there are ways to instrument this to make sure I am not accidentally leaking local variables anywhere.

* Ideas
** Are there diagrams I can create about MyCmd's structure that would help?

* Bugs

* Tasks

* Development Log Entries
** TODO 0.1 Release Announcement
** TODO Higher Order Functions in Bash
** TODO Pseudo-structs
** TODO Safety Guarantees in MyCmd
** TODO How MyCmd commands are executed
** TODO How I use git worktrees in development
** TODO Profiling Shell Script Execution
** TODO Testing
** TODO Output Capture and Logging
** TODO General feature discussions
