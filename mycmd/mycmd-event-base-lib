# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Event Base Support Library
#   Support for Event Handling for MyCmd

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_EVENT_BASE_LIB:-}" ]] && return
readonly _MYCMD_EVENT_BASE_LIB=1

if [[ ! -v _MYCMD_LIB_DIR ]]; then
    readonly _MYCMD_EVENT_BASE_LIB_SELF_FILE="${BASH_SOURCE[0]}"
    _MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_EVENT_BASE_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly _MYCMD_LIB_DIR
fi

# ------------------------------------------------------------------------------
# Source Required Support Libraries

if [[ ! -v _MYCMD_LOADING_BASE_LIB ]]; then
    # shellcheck source=./mycmd-loading-base-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-base-lib"
fi

mycmd._load_mycmd_lib_support_lib "output"
mycmd._load_mycmd_lib_support_lib "vendoring"

# ------------------------------------------------------------------------------
# Event Handling Support
if ! mycmd.load_vendor_library "bashup.events"; then
    mycmd.err_exit 1 "Required vendor library 'bashup.events' missing."
fi

# mycmd.event
#   Simple wrapper around bashup.event to present a consistent
#   interface to MyCmd command implementors.
function mycmd.event() {
    event "${@}"
}

mycmd.trace "The MyCmd Event Base support library has been sourced."
