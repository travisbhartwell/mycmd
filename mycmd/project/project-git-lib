# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Project Commad Group Library Git Support Library
#   Git Related Functions for Project Tasks

# Set Bash options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

# This library should only be sourced once. Technique borrowed from
# https://stackoverflow.com/a/64534652
[[ -n "${_MYCMD_PROJECT_GIT_LIB:-}" ]] && return
readonly _MYCMD_PROJECT_GIT_LIB=1

# All functions in this support library require git
mycmd.defer_at_startup mycmd.init_bin git

function project:git._execute_git() {
    mycmd.bin_execute git "${@}"
}

function project:git._execute_git_working_dir() {
    local working_dir="${1}"
    shift

    mycmd.bin_execute git -C "${working_dir}" "${@}"
}

function project:git.is_working_tree_dirty() {
    local status
    if ! status="$(project:git._execute_git status --porcelain 2>&1)"; then
        return 1
    fi

    [[ -n "${status-}" ]]
}

function project:git.list_tags() {
    local -n dest_array_ref="${1}"
    shift

    if (($# > 0)); then
        local pattern="${*}"

        # shellcheck disable=SC2312
        readarray -t dest_array_ref < <(project:git._execute_git tag -l "${pattern}" --sort=-v:refname)
    else
        # shellcheck disable=SC2312
        readarray -t dest_array_ref < <(project:git._execute_git tag -l --sort=-v:refname)
    fi

    mycmd.trace "Retrieved ${#dest_array_ref[@]} tag names from repository."
}

function project:git.create_lightweight_tag() {
    if (($# < 1)); then
        mycmd.log "Missing tag name to create."
        return 1
    fi

    local -r tag_name="${1}"
    local commit

    if (($# == 1)); then
        commit="HEAD"
    else
        commit="${2}"
    fi
    readonly commit

    if ! project:git._execute_git tag "${tag_name}" "${commit}"; then
        return 1
    fi

    project.verbose "Created tag '${tag_name}' at commit '${commit}'."
}

function project:git.create_annotated_tag() {
    local -r tag_name="${1}"
    local -r commit="${2}"
    local -n message_parts_array_ref="${3}"

    local -a git_arguments=("tag" "-a")

    local message_line
    for message_line in "${message_parts_array_ref[@]}"; do
        git_arguments+=("-m" "${message_line}")
    done

    git_arguments+=("${commit}" "${tag_name}")

    if ! project:git._execute_git "${git_arguments[@]}"; then
        return 1
    fi

    project.verbose "Created annotated tag '${tag_name}' at commit '${commit}'."
}

function project:git.push_changes_with_annotated_tags() {
    project.output_only_if_not_quiet "Pushing to remote with tags."

    if project.is_verbose_enabled; then
        project:git._execute_git push --follow-tags
    else
        project:git._execute_git push --quiet --follow-tags
    fi
}

mycmd.defer_at_startup mycmd.init_bin grep
function project:git.commit_is_tagged_matching_pattern() {
    local -r commit="${1}"
    local -r pattern="${2}"

    local canonicalized_commit
    if ! canonicalized_commit="$(project:git._execute_git rev-parse "${commit}")"; then
        mycmd.log "Cannot find commit '${commit}'."
        return 1
    fi

    project:git._execute_git \
        for-each-ref \
        refs/tags \
        --format='%(refname:short)' \
        --points-at="${canonicalized_commit}" \
        | mycmd.bin_execute grep -q "${pattern}"
}

function project:git.current_tag_for_worktree() {
    local -r commit="${1}"
    local -r pattern="${2}"

    local canonicalized_commit
    if ! canonicalized_commit="$(project:git._execute_git rev-parse "${commit}")"; then
        mycmd.log "Cannot find commit '${commit}'."
        return 1
    fi

    project:git._execute_git \
        for-each-ref \
        refs/tags \
        --format='%(refname:short)' \
        --points-at="${canonicalized_commit}"
}

function project:git.add_worktree_at_detached_commit() {
    local -r worktree_dir="${1}"
    local -r commitish="${2}"

    if project.is_verbose_enabled; then
        project:git._execute_git worktree add --detach "${worktree_dir}" "${commitish}"
    else
        project:git._execute_git worktree add --quiet --detach "${worktree_dir}" "${commitish}"
    fi
}

function project:git.update_worktree_to_commitish() {
    local -r worktree_dir="${1}"
    local -r commitish="${2}"

    if project.is_verbose_enabled; then
        project:git._execute_git_working_dir "${worktree_dir}" checkout --detach "${commitish}"
    else
        project:git._execute_git_working_dir "${worktree_dir}" checkout --quiet --detach "${commitish}"
    fi
}

function project:git.fetch_tags() {
    if project.is_verbose_enabled; then
        project:git._execute_git fetch --tags
    else
        project:git._execute_git fetch --tags --quiet
    fi
}

mycmd.trace "The MyCmd Project Command Group Git support library has been sourced."
