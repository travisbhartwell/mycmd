# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Project Shell Command Group Library
#   Shell Script Related Functions for Project Tasks

# Set Bash options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

mycmd.register_command_group_version "0.1"
mycmd.register_command_group_short_desc "MyCmd Shell Project Command Group Library"
mycmd.register_command_group_long_desc "Shell Script Related Functions for Project Tasks"

[[ -n "${_MYCMD_SOURCING_COMMAND_GROUP_FOR_HELP:-}" ]] && return

# This library should only be sourced once. Technique borrowed from
# https://stackoverflow.com/a/64534652
[[ -n "${_MYCMD_PROJECT_SHELL_LIB:-}" ]] && return
readonly _MYCMD_PROJECT_SHELL_LIB=1

#----------------------------------------
# Code formatting
mycmd.defer_at_startup mycmd.init_bin shfmt
function shell.format() {
    if project.verbose_enabled; then
        mycmd.output "Formatting the following files:"
        project.list-files "${1}"
    fi

    local -n format_fileset="${1}"

    mycmd.bin_execute shfmt --language-dialect bash --indent=4 --binary-next-line --case-indent --write "${format_fileset[@]}"
}

#----------------------------------------
# Code Lint
mycmd.defer_at_startup mycmd.init_bin shellcheck
function shell.lint() {
    if project.verbose_enabled; then
        mycmd.output "Linting the following files:"
        project.list-files "${1}"
    fi

    local -n lint_fileset="${1}"
    mycmd.output "Running ShellCheck:"
    mycmd.bin_execute shellcheck --check-sourced "${lint_fileset[@]}"
}


mycmd.trace "The MyCmd Project Shell command group library has been sourced."
