# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Project Commad Group Library Task Support Library
#   Support for Task Definition Data Structures and Related Functions for Project Runner

# Set Bash options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

# This library should only be sourced once. Technique borrowed from
# https://stackoverflow.com/a/64534652
[[ -n "${_MYCMD_PROJECT_TASK_LIB:-}" ]] && return
readonly _MYCMD_PROJECT_TASK_LIB=1

readonly _TASK_NAME_FIELD='project-task-name'
readonly _TASK_FUNCTION_FIELD='project-task-fn'
readonly _TASK_FILESET_FIELD='project-task-fileset'
readonly _TASK_ARGUMENTS_REF_NAME_FIELD='project-task-args-ref-name'
readonly _TASK_ARGUMENT_INDEX_FIELD='project-task-arg-index'
readonly _TASK_ARGUMENT_COUNT_FIELD='project-task-argc'

function project:task._new_task() {
    local -n tasks_array_ref="${1}"
    local -r arguments_ref_name="${2}"
    local -n task_arguments_array_ref="${arguments_ref_name}"
    local -n task_argument_refnames_array_ref="${3}"
    local -n task_arg_indices_array_ref="${4}"
    local -n task_arg_counts_array_ref="${5}"
    shift 5

    local -r task_name="${1}"
    local -r task_function_name="${2}"
    shift 2

    if [[ -v tasks_array_ref[${task_name}] ]]; then
        mycmd.log "Task '${task_name}' already registered."
        return 1
    fi

    tasks_array_ref["${task_name}"]="${task_function_name}"
    mycmd.trace "Created task '${task_name}' in '${!tasks_array_ref}' with function '${task_function_name}'."

    local argc=$#
    task_arg_counts_array_ref["${task_name}"]="${argc}"

    if ((argc > 0)); then
        local index="${#task_arguments_array_ref[@]}"
        task_arguments_array_ref+=("${@}")
        task_argument_refnames_array_ref["${task_name}"]="${arguments_ref_name}"
        task_arg_indices_array_ref["${task_name}"]="${index}"

        mycmd.trace "Created task arguments for task '${task_name}' in ${!task_argument_refnames_array_ref} at index ${index} in ${!task_arg_indices_array_ref}."
        mycmd.trace "Registered argument count of ${argc} for task '${task_name}' in  ${!task_arg_counts_array_ref}."
    else
        mycmd.trace "Registered 0 arguments counts for task '${task_name}' in ${!task_arg_counts_array_ref}."
    fi
}

function project:task._new_task_with_fileset() {
    local -r tasks_array_ref_name="${1}"
    local -n task_filesets_array_ref="${2}"
    local -r arguments_ref_name="${3}"
    local -r task_argument_refnames_array_ref_name="${4}"
    local -r task_arg_indices_array_ref_name="${5}"
    local -r task_arg_counts_array_ref_name="${6}"
    shift 6

    local -r task_name="${1}"
    local -r task_function_name="${2}"
    local -r task_fileset_name="${3}"
    shift 3

    if ! project:task._new_task \
        "${tasks_array_ref_name}" \
        "${arguments_ref_name}" \
        "${task_argument_refnames_array_ref_name}" \
        "${task_arg_indices_array_ref_name}" \
        "${task_arg_counts_array_ref_name}" \
        "${task_name}" \
        "${task_function_name}" \
        "${@}"; then
        return 1
    fi

    task_filesets_array_ref["${task_name}"]="${task_fileset_name}"

    mycmd.trace "Registered fileset '${task_fileset_name}' for task '${task_name}' in ${!task_filesets_array_ref}."
}

# shellcheck disable=SC2178
function project:task._get_task() {
    local -n tasks_array_ref="${1}"
    local -n task_filesets_array_ref="${2}"
    local -n task_argument_refnames_array_ref="${3}"
    local -n task_arg_indices_array_ref="${4}"
    local -n task_arg_counts_array_ref="${5}"
    shift 5

    local -r task_name="${1}"
    local -n task_struct_ref="${2}"

    if [[ ! -v tasks_array_ref[${task_name}] ]]; then
        mycmd.log "Unknown task: '${task_name}'."
        return 1
    fi

    mycmd.trace "Returning task definition:"
    task_struct_ref["${_TASK_NAME_FIELD}"]="${task_name}"
    mycmd.trace "- ${_TASK_NAME_FIELD}: ${task_struct_ref["${_TASK_NAME_FIELD}"]}"

    task_struct_ref["${_TASK_FUNCTION_FIELD}"]="${tasks_array_ref["${task_name}"]}"
    mycmd.trace "- ${_TASK_FUNCTION_FIELD}: ${task_struct_ref["${_TASK_FUNCTION_FIELD}"]}"

    local count="${task_arg_counts_array_ref["${task_name}"]}"
    task_struct_ref["${_TASK_ARGUMENT_COUNT_FIELD}"]="${count}"
    mycmd.trace "- ${_TASK_ARGUMENT_COUNT_FIELD}: ${task_struct_ref["${_TASK_ARGUMENT_COUNT_FIELD}"]}"

    if ((count > 0)); then
        task_struct_ref["${_TASK_ARGUMENT_INDEX_FIELD}"]="${task_arg_indices_array_ref["${task_name}"]}"
        mycmd.trace "- ${_TASK_ARGUMENT_INDEX_FIELD}: ${task_struct_ref["${_TASK_ARGUMENT_INDEX_FIELD}"]}"

        task_struct_ref["${_TASK_ARGUMENTS_REF_NAME_FIELD}"]="${task_argument_refnames_array_ref["${task_name}"]}"
        mycmd.trace "- ${_TASK_ARGUMENTS_REF_NAME_FIELD}: ${task_struct_ref["${_TASK_ARGUMENTS_REF_NAME_FIELD}"]}"
    else
        mycmd.trace "- ${_TASK_ARGUMENT_INDEX_FIELD}: No index set"
        mycmd.trace "- ${_TASK_ARGUMENTS_REF_NAME_FIELD}: No task arguments ref names ref set"
    fi

    if [[ -v task_filesets_array_ref[${task_name}] ]]; then
        task_struct_ref["${_TASK_FILESET_FIELD}"]="${task_filesets_array_ref["${task_name}"]}"
        mycmd.trace "- ${_TASK_FILESET_FIELD}: ${task_struct_ref["${_TASK_FILESET_FIELD}"]}"
    else
        mycmd.trace "- ${_TASK_FILESET_FIELD}: No fileset set"
    fi
}

function project:task._get_required_field_from_task_struct() {
    local -r field_name="${1}"
    # shellcheck disable=SC2178
    local -n task_struct_ref="${2}"

    echo "${task_struct_ref["${field_name}"]}"
}

function project:task._get_optional_field_from_task_struct() {
    local -r field_name="${1}"
    # shellcheck disable=SC2178
    local -n task_struct_ref="${2}"

    if [[ -v task_struct_ref["${field_name}"] ]]; then
        echo "${task_struct_ref["${field_name}"]}"
        return 0
    else
        local task_name
        task_name="$(project:task.get_name "${!task_struct_ref}")"
        readonly task_name
        mycmd.trace "No field '${field_name}' defined for task '${task_name}'."
        return 1
    fi
}

function project:task.get_name() {
    project:task._get_required_field_from_task_struct \
        "${_TASK_NAME_FIELD}" \
        "${@}"
}

function project:task.get_function_name() {
    project:task._get_required_field_from_task_struct \
        "${_TASK_FUNCTION_FIELD}" \
        "${@}"
}

function project:task.function_exists_for_task() {
    # shellcheck disable=SC2178
    local -n task_struct_ref="${1}"

    local fn
    fn="$(project:task.get_function_name "${!task_struct_ref}")"
    readonly fn

    if ! mycmd.function_exists "${fn}"; then
        local task_name
        task_name="$(project:task.get_name "${!task_struct_ref}")"
        readonly task_name
        mycmd.log "Unknown task function: '${fn}' for task '${task_name}'."
        return 1
    fi

    return 0
}

function project:task.get_argument_count() {
    project:task._get_required_field_from_task_struct \
        "${_TASK_ARGUMENT_COUNT_FIELD}" \
        "${@}"
}

function project:task.get_argument_index() {
    project:task._get_optional_field_from_task_struct \
        "${_TASK_ARGUMENT_INDEX_FIELD}" \
        "${@}"
}

function project:task.get_arguments_ref_name() {
    project:task._get_optional_field_from_task_struct \
        "${_TASK_ARGUMENTS_REF_NAME_FIELD}" \
        "${@}"
}

function project:task.get_fileset() {
    project:task._get_optional_field_from_task_struct \
        "${_TASK_FILESET_FIELD}" \
        "${@}"
}

function project:task.get_arguments() {
    local -r task_struct_ref_name="${1}"
    local -n arguments_array_dest_ref="${2}"
    shift 2

    local task_name
    task_name="$(project:task.get_name "${task_struct_ref_name}")"
    readonly task_name

    local -i argc
    argc="$(project:task.get_argument_count "${task_struct_ref_name}")"
    readonly argc

    if ((argc == 0)); then
        mycmd.trace "No arguments defined for task '${task_name}'."
        return 0
    fi

    local -i index
    if ! index="$(project:task.get_argument_index "${task_struct_ref_name}")"; then
        mycmd.log "Unexpected error: index should be set for task '${task_name}'."
        return 1
    fi
    readonly index

    local arguments_ref_name
    if ! arguments_ref_name="$(project:task.get_arguments_ref_name "${task_struct_ref_name}")"; then
        mycmd.log "Unexpected error: arguments ref name should be set for task '${task_name}'."
        return 1
    fi
    readonly arguments_ref_name
    local -n arguments_array_ref="${arguments_ref_name}"

    arguments_array_dest_ref=("${arguments_array_ref[@]:index:argc}")
    mycmd.trace "Set arguments in ${!arguments_array_dest_ref} as ${arguments_array_dest_ref[*]}"
}

function project:task.new_unregistered_zero_arg_task() {
    local -r task_name="${1}"
    local -n new_unregistered_task_struct_ref="${2}"

    mycmd.trace "Returning unregistered zero argument task definition:"
    new_unregistered_task_struct_ref["${_TASK_NAME_FIELD}"]="${task_name}"
    mycmd.trace "- ${_TASK_NAME_FIELD}: ${new_unregistered_task_struct_ref["${_TASK_NAME_FIELD}"]}"

    new_unregistered_task_struct_ref["${_TASK_FUNCTION_FIELD}"]=execute_task
    mycmd.trace "- ${_TASK_FUNCTION_FIELD}: ${new_unregistered_task_struct_ref["${_TASK_FUNCTION_FIELD}"]}"

    new_unregistered_task_struct_ref["${_TASK_ARGUMENT_COUNT_FIELD}"]=0
    mycmd.trace "- ${_TASK_ARGUMENT_COUNT_FIELD}: ${new_unregistered_task_struct_ref["${_TASK_ARGUMENT_COUNT_FIELD}"]}"

    mycmd.trace "- ${_TASK_ARGUMENT_INDEX_FIELD}: No index set"
    mycmd.trace "- ${_TASK_ARGUMENTS_REF_NAME_FIELD}: No task arguments ref names ref set"
    mycmd.trace "- ${_TASK_FILESET_FIELD}: No fileset set"
}

mycmd.trace "The MyCmd Project Command Group Task support library has been sourced."
