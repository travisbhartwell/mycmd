# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Project Command Group Library
#   Library for Project Task Runner Functionality

# Set Bash options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

mycmd.register_command_group_version "0.1"
mycmd.register_command_group_short_desc "MyCmd Project Command Group Library"
mycmd.register_command_group_long_desc "Library for Project Task Runner Functionality"

[[ -n "${_MYCMD_SOURCING_COMMAND_GROUP_FOR_HELP:-}" ]] && return

# This library should only be sourced once. Technique borrowed from
# https://stackoverflow.com/a/64534652
[[ -n "${_MYCMD_PROJECT_LIB:-}" ]] && return
readonly _MYCMD_PROJECT_LIB=1

declare -Agx _MYCMD_PROJECT_FILESETS=()
declare -Agx _MYCMD_PROJECT_TASKS=()
declare -Agx _MYCMD_PROJECT_TASK_FILESETS=()
declare -Agx _MYCMD_PROJECT_TASK_ARGUMENTS_REF_NAMES=()
declare -Agx _MYCMD_PROJECT_TASK_ARGUMENT_INDICES=()
declare -Agx _MYCMD_PROJECT_TASK_ARGUMENT_COUNTS=()
declare -agx _MYCMD_PROJECT_TASK_ARGUMENTS=()
declare -gx _MYCMD_PROJECT_DEFAULT_TASK

mycmd.load_command_group_support_lib "task"

function project:task.get_task() {
    project:task._get_task \
        _MYCMD_PROJECT_TASKS \
        _MYCMD_PROJECT_TASK_FILESETS \
        _MYCMD_PROJECT_TASK_ARGUMENTS_REF_NAMES \
        _MYCMD_PROJECT_TASK_ARGUMENT_INDICES \
        _MYCMD_PROJECT_TASK_ARGUMENT_COUNTS \
        "${@}"
}

function project.enable_quiet_mode() {
    declare -gx MYPROJECT_QUIET=1
}

function project.disable_quiet_mode() {
    if [[ -v MYPROJECT_QUIET ]]; then
        unset -v MYPROJECT_QUIET
    fi
}

function project.is_quiet_enabled() {
    [[ -n "${MYPROJECT_QUIET-}" ]]
}

function project.output_only_if_not_quiet() {
    project.is_quiet_enabled \
        || mycmd.output "${*}"
}

function project.enable_verbose_mode() {
    declare -gx MYPROJECT_VERBOSE=1
}

function project.disable_verbose_mode() {
    if [[ -v MYPROJECT_VERBOSE ]]; then
        unset -v MYPROJECT_VERBOSE
    fi
}

function project.is_verbose_enabled() {
    [[ -n "${MYPROJECT_VERBOSE-}" ]]
}

function project.verbose() {
    if project.is_verbose_enabled; then
        mycmd.output "[VERBOSE] ${*}"
    fi
}

function project.get_default_task() {
    if [[ -v _MYCMD_PROJECT_DEFAULT_TASK ]]; then
        echo "${_MYCMD_PROJECT_DEFAULT_TASK}"
        return 0
    else
        return 1
    fi
}

# project.find_up
# - returns 1 if the file is not found in the current directory or any parent
# - returns 0 if the file is found in the current directory or any parent
# if found, the absolute path of the location of the file is echoed
function project.find_up() {
    local -r name_to_find="${1}"
    local starting_dir="${2}"

    if ! starting_dir="$(mycmd.canonicalize_path "${starting_dir}")"; then
        mycmd.debug "'${starting_dir}' not found."
        return 1
    fi

    local -r possible_path="${starting_dir}/${name_to_find}"

    if [[ -e "${possible_path}" ]]; then
        echo "${possible_path}"
        return 0
    fi

    if [[ "${starting_dir}" = "/" ]]; then
        mycmd.debug "File '${name_to_find}' not found"
        return 1
    fi

    project.find_up "${name_to_find}" "${starting_dir}/.."
}

function project.find_closest_project_file() {
    local -r starting_dir="${1}"

    project.find_up myproject "${starting_dir}"
}

function project.load_project_file() {
    declare -rgx MYPROJECT_PROJECT_FILE="${1}"
    shift

    declare -gx MYPROJECT_BASE_DIR
    if ! MYPROJECT_BASE_DIR="$(cd "$(dirname "${MYPROJECT_PROJECT_FILE}")" &>/dev/null && pwd -P)"; then
        mycmd.log "Error fetching project directory."
        return 1
    fi
    readonly MYPROJECT_BASE_DIR

    if ! mycmd.source_lib_by_path_if_found "${MYPROJECT_PROJECT_FILE}"; then
        mycmd.log "Error loading project file '${MYPROJECT_PROJECT_FILE}'"
        return 1
    fi
}

function project.load_closest_project_file() {
    local project_file_path
    if ! project_file_path="$(project.find_closest_project_file "${PWD}")"; then
        mycmd.log "No project file (named 'myproject') found in this directory or any parent."
        return 1
    fi
    readonly project_file_path

    if ! project.load_project_file "${project_file_path}"; then
        mycmd.log "Error loading project file."
        return 1
    fi

    return 0
}

function project.register_task() {
    if (($# == 1)); then
        set -- "${1}" "${1}"
    fi

    project:task._new_task \
        _MYCMD_PROJECT_TASKS \
        _MYCMD_PROJECT_TASK_ARGUMENTS \
        _MYCMD_PROJECT_TASK_ARGUMENTS_REF_NAMES \
        _MYCMD_PROJECT_TASK_ARGUMENT_INDICES \
        _MYCMD_PROJECT_TASK_ARGUMENT_COUNTS \
        "${@}"
}

function project.register_task_with_fileset() {
    project:task._new_task_with_fileset \
        _MYCMD_PROJECT_TASKS \
        _MYCMD_PROJECT_TASK_FILESETS \
        _MYCMD_PROJECT_TASK_ARGUMENTS \
        _MYCMD_PROJECT_TASK_ARGUMENTS_REF_NAMES \
        _MYCMD_PROJECT_TASK_ARGUMENT_INDICES \
        _MYCMD_PROJECT_TASK_ARGUMENT_COUNTS \
        "${@}"
}

function project.register_default_task() {
    local -r task_name="${1}"

    if [[ -v _MYCMD_PROJECT_TASKS[${task_name}] ]]; then
        _MYCMD_PROJECT_DEFAULT_TASK="${task_name}"
        return 0
    else
        mycmd.log "Unknown task '${task_name}' specified as default task."
        return 1
    fi
}

function project.execute_task() {
    # shellcheck disable=SC2034
    local -n task_execution="${1}"
    shift

    local task_name
    task_name=$(project:task.get_name task_execution)
    readonly task_name
    mycmd.trace "Executing task with name: '${task_name}'."

    local -a execution_args=()
    project:task.get_arguments task_execution execution_args

    local return_code=0

    # shellcheck disable=SC2034
    local -A task_definition=()

    if ! project:task.get_task "${task_name}" task_definition; then
        mycmd.log "Unknown task: '${task_name}'."
        return_code=1
    elif ! project:task.function_exists_for_task task_definition; then
        return_code=1
    else
        local -r fn="$(project:task.get_function_name task_definition || true)"
        mycmd.trace "Executing function '${fn}' for task '${task_name}'."

        local -a task_args=()
        project:task.get_arguments task_definition task_args

        set -- "${task_args[@]}" "${execution_args[@]}"

        mycmd.output "➡️ Executing task '${task_name}'..."

        cd "${MYPROJECT_BASE_DIR}"

        local fileset_name
        if fileset_name="$(project:task.get_fileset task_definition)"; then
            if [[ ! -v _MYCMD_PROJECT_FILESETS[${fileset_name}] ]]; then
                mycmd.log "Specified file set '${fileset_name}' for task '${task_name}' not defined."
                return_code=1
            else
                "${fn}" "${fileset_name}" "${@}" || return_code=$?
            fi
        else
            "${fn}" "${@}" || return_code=$?
        fi
    fi

    if ((return_code == 0)); then
        mycmd.output "✅ Task '${task_name}' succeeded."
    else
        mycmd.output "❌ Task '${task_name}' failed."
    fi

    return "${return_code}"
}

function project.extract_task_positions() {
    local -n task_positions_ref="${1}"
    shift
    local -i arg_index=${1}
    shift

    shift "${arg_index}"

    while (($# > 0)); do
        ((arg_index += 1))

        if [[ "${1}" = ";" && "$#" -gt 0 ]]; then
            task_positions_ref+=("${arg_index}")
        fi

        shift
    done
}

function project.execute_tasks() {
    local task_name

    for task_name in "${@}"; do
        local -A task=()
        local return_code=0

        project:task.new_unregistered_zero_arg_task "${task_name}" task
        project.execute_task task || return_code=$?

        if ((return_code != 0)); then
            return "${return_code}"
        fi
    done
}

function project.list_registered_tasks() {
    if (("${#_MYCMD_PROJECT_TASKS[@]}" == 0)); then
        project.output_only_if_not_quiet "There are no registered tasks."
        return 0
    fi

    local -a sorted_task_names
    # shellcheck disable=SC2034
    readarray -t sorted_task_names < \
        <(printf '%s\n' "${!_MYCMD_PROJECT_TASKS[@]}" | LC_ALL=en_US.UTF-8 sort || true)

    project.output_only_if_not_quiet "The following tasks are registered:"

    local task
    for task in "${sorted_task_names[@]}"; do
        mycmd.output "${task}"
    done
}

function project.register_fileset() {
    local -r fileset_name="${1}"
    declare -agx "${fileset_name}=()"
    _MYCMD_PROJECT_FILESETS[${fileset_name}]=1
}

mycmd.defer_at_startup mycmd.init_bin find
mycmd.defer_at_startup mycmd.init_bin realpath
function project.find_files_for_fileset() {
    local -n fileset="${1}"
    shift

    if ! [[ "${*}" =~ .*-print0.* ]]; then
        set -- "${@}" -print0
    fi

    local realpath_exe
    if ! realpath_exe="$(mycmd._locate_bin realpath)"; then
        mycmd.debug "Unable to find realpath"
        return 1
    fi
    readonly realpath_exe

    # shellcheck disable=SC2034
    readarray -t fileset < <(mycmd.bin_execute find "${@}" \
        | xargs -0 "${realpath_exe}" --relative-to="${MYPROJECT_BASE_DIR}" \
        | LC_ALL=en_US.UTF-8 sort || true)
}

mycmd.defer_at_startup mycmd.init_bin realpath
function project.add_files_to_fileset() {
    local -n fileset_to_append="${1}"
    shift

    local filename
    local relative_filename

    for filename in "${@}"; do
        if ! relative_filename="$(mycmd.bin_execute realpath --relative-to="${MYPROJECT_BASE_DIR}" "${filename}")"; then
            mycmd.debug "Error getting relative path for ${filename}"
            return 1
        fi

        fileset_to_append+=("${relative_filename}")
    done
}

function project.list-files() {
    local -n fileset_to_list="${1}"

    echo "${fileset_to_list[*]}" | tr ' ' '\n'
}

function project.load_task_library() {
    local -r task_library="${1}"

    mycmd.load_command_group_support_lib "${task_library}"
}

mycmd.trace "The MyCmd Project command group library has been sourced."
