# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Command Support Library
#   Support for Command Data Structures and Related Functions for MyCmd

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    # coverage skip: 2
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_COMMAND_LIB:-}" ]] && return
readonly _MYCMD_COMMAND_LIB=1

if [[ ! -v _MYCMD_LIB_DIR ]]; then
    readonly _MYCMD_COMMAND_LIB_SELF_FILE="${BASH_SOURCE[0]}"
    _MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_COMMAND_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly _MYCMD_LIB_DIR
fi

# ------------------------------------------------------------------------------
# Source Required Support Libraries
if [[ ! -v _MYCMD_LOADING_LIB ]]; then
    # shellcheck source=./mycmd-loading-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-lib"
fi

mycmd.load_mycmd_lib_support_lib "function-calling"
mycmd.load_mycmd_lib_support_lib "output"
mycmd.load_mycmd_lib_support_lib "platform-support"
mycmd.load_mycmd_lib_support_lib "registry"

# ------------------------------------------------------------------------------
## The Command
##
## A Command is a script executed by MyCmd.
##
## A Command is described by the following attributes:
## - A name, for example 'chase-visa'
##
## - The fully qualified name of the containing Command Group, for example, 'mycmd/financial/import'
##
## - A fully qualified name, representing the fully path in the hierarchy, for example,
##   'mycmd/financial/import/chase-visa'
##
## - The namespaced parts of the name, are the individual parts of the hierarchy,
##   for example, [mycmd, financial, import, chase-visa] for the array version, or
##   "mycmd financial import chase-visa" as a string.
##
## - A source file for the command, for example, $HOME/mycmd/financial/import/chase-visa.
##
## - A short description used in displaying help.
##
## - Help text (usually documenting command line parameters and usage) used in displaying help.
##
## - A version string used in displaying help and version information.

# ------------------------------------------------------------------------------
# Command Aliases to Registered Item Functions
shopt -s expand_aliases

# ------------------------------------------------------------------------------
# Command Help Information Registration Aliases
alias mycmd:command.register_short_description='mycmd:registry.register_short_description'
alias mycmd:command.register_help_text='mycmd:registry.register_help_text'
alias mycmd:command.register_version='mycmd:registry.register_version'

# ------------------------------------------------------------------------------
# Command Accessor Aliases
alias mycmd:command.is_command='mycmd:registered_item.is_command'
alias mycmd:command.get_name='mycmd:registered_item.get_name'
alias mycmd:command.get_fully_qualified_name='mycmd:registered_item.get_fully_qualified_name'
alias mycmd:command.get_namespaced_parts_as_string='mycmd:registered_item.get_namespaced_parts_as_string'
alias mycmd:command.get_parent_command_group_fully_qualified_name='mycmd:registered_item.get_parent_command_group_fully_qualified_name'
alias mycmd:command.get_source_directory='mycmd:registered_item.get_source_directory'
alias mycmd:command.get_source_file_path='mycmd:registered_item.get_source_file_path'
alias mycmd:command.get_short_description='mycmd:registered_item.get_short_description'
alias mycmd:command.get_help_text='mycmd:registered_item.get_help_text'
alias mycmd:command.get_version='mycmd:registered_item.get_version'
alias mycmd:command.is_metadata_loaded='mycmd:registered_item.is_metadata_loaded'

# ------------------------------------------------------------------------------
# Command Loading Alias
alias mycmd:command.load_command='mycmd:registered_item.load_item'

# ------------------------------------------------------------------------------
# Command Help Printing
alias mycmd:command.print_version='mycmd:registered_item.print_item_version'
alias mycmd:command.print_help='mycmd:registered_item.print_item_help'

function mycmd:command.print_version_by_name() {
    local -r fully_qualified_name="${1}"
    # shellcheck disable=SC2034
    local -A command

    if ! mycmd:registry.get_command "${fully_qualified_name}" command; then
        mycmd.debug "Unknown command '${fully_qualified_name}'."
        return 1
    fi

    mycmd:command.print_version command
}

function mycmd:command.print_help_by_name() {
    local -r fully_qualified_name="${1}"
    # shellcheck disable=SC2034
    local -A command

    if ! mycmd:registry.get_command "${fully_qualified_name}" command; then
        mycmd.debug "Unknown command '${fully_qualified_name}'."
        return 1
    fi

    mycmd:command.print_help command
}

# ------------------------------------------------------------------------------
# Command Execution Functions
function mycmd:command.execute_by_name() {
    local -r fully_qualified_name="${1}"
    shift

    # shellcheck disable=SC2034
    local -A command
    if ! mycmd:registry.get_command "${fully_qualified_name}" command; then
        mycmd.error_output "Error getting command '${fully_qualified_name}'."
        return 1
    fi

    mycmd:command.execute command "${@}"
}

function mycmd:command.execute() {
    # shellcheck disable=SC2178
    local -n command_struct_ref="${1}"
    shift

    local fully_qualified_name
    fully_qualified_name="$(mycmd:command.get_fully_qualified_name "${!command_struct_ref}")"
    readonly fully_qualified_name

    mycmd.trace "Executing command '${fully_qualified_name}'."

    # Load the command and its command groups
    if ! mycmd:command.load_command "${!command_struct_ref}"; then
        mycmd.error_output "Error loading command '${fully_qualified_name}'."
        return 1
    fi

    # Validate that mycmd.main exists
    if ! mycmd.function_exists "mycmd.main"; then
        mycmd.error_output "Error: 'mycmd.main' function does not exist."
        return 1
    fi

    mycmd.configure_shell_trace_and_verbosity

    local namespaced_parts_string
    namespaced_parts_string="$(mycmd:command.get_namespaced_parts_as_string "${!command_struct_ref}")"
    readonly namespaced_parts_string

    declare -gx _MYCMD_FULLY_QUALIFIED_NAME="${fully_qualified_name}"
    declare -gx _MYCMD_NAMESPACED_PARTS_STRING="${namespaced_parts_string}"

    local result=0
    mycmd.main "${@}" || result=$?

    return "${result}"
}

# ------------------------------------------------------------------------------
# Command Config and Cache File Functions
function mycmd:command.get_cache_file() {
    local -r cache_file_name="${1}"

    mycmd.get_user_cache_file "${_MYCMD_FULLY_QUALIFIED_NAME}" "${cache_file_name}"
}

function mycmd:command.get_config_file() {
    local -r config_file_name="${1}"

    mycmd.get_user_config_file "${_MYCMD_FULLY_QUALIFIED_NAME}" "${config_file_name}"
}

mycmd.trace "The MyCmd Command support library has been sourced."
