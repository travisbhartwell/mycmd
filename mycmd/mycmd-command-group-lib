# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Command Group Support Library
#   Support for Command Group Data Structures and Related Functions for MyCmd

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    # coverage skip: 2
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_COMMAND_GROUP_LIB:-}" ]] && return
readonly _MYCMD_COMMAND_GROUP_LIB=1

if [[ ! -v _MYCMD_LIB_DIR ]]; then
    readonly _MYCMD_COMMAND_GROUP_LIB_SELF_FILE="${BASH_SOURCE[0]}"
    _MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_COMMAND_GROUP_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly _MYCMD_LIB_DIR
fi

# ------------------------------------------------------------------------------
# Source Required Support Libraries
if [[ ! -v _MYCMD_LOADING_LIB ]]; then
    # shellcheck source=./mycmd-loading-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-lib"
fi

mycmd.load_mycmd_lib_support_lib "command"
mycmd.load_mycmd_lib_support_lib "event-lifecycle"
mycmd.load_mycmd_lib_support_lib "formatted-output"
mycmd.load_mycmd_lib_support_lib "output"
mycmd.load_mycmd_lib_support_lib "pathname"
mycmd.load_mycmd_lib_support_lib "registry"

# ------------------------------------------------------------------------------
## The Command Group
##
## A Command Group is the basic unit of organization and code reuse in MyCmd, representing part
## of the hierarchal structure.
##
## The Command Group inherits the code from the command groups above it in the heirarchy and any
## of the Commands and Command Groups it contains will inherit the Command Group's provided
## code.
##
## A Command Group is accessed via an associative array that contains all of the scalar values.
## For data that is not scalar -- such as the list of child commands -- a separate array reference
## is passed in to get the array, and so there is not a corresponding field name defined for those.
##
## A Command Group is described by the following attributes:
## - A name, for example, 'import'.
##
## - A fully qualified name, representing the fully path in the hierarchy, for example,
##   'mycmd/financial/import'.
##
## - The namespaced parts of the name, are the individual parts of the hierarchy,
##   for example, [mycmd, financial, import] for the array version, or
##   "mycmd financial import" as a string.
##
## - A source directory, the directory containing the source file of the command group, for example,
##   $HOME/mycmd/financial/import/.
##
## - A source file, the source of the shared library code for the Command Group, for example,
##   $HOME/mycmd/financial/import/import-lib. The source file is named with the name of the
##   Command Group with "-lib" appended to it.
##
## - Any number of child commands.
##
## - Any number of child command groups.
##
## - A short description used in displaying help.
##
## - Long help text used in displaying help.
##
## - A version string used in displaying help and version information.
##
## - Whether or not the metadata (help and version information) has been fully loaded.

# ------------------------------------------------------------------------------
# Command Group Aliases to Registered Item Functions
shopt -s expand_aliases

# ------------------------------------------------------------------------------
# Command Group Help Information Registration Aliases
alias mycmd:command_group.register_short_description='mycmd:registry.register_short_description'
alias mycmd:command_group.register_help_text='mycmd:registry.register_help_text'
alias mycmd:command_group.register_version='mycmd:registry.register_version'

# ------------------------------------------------------------------------------
# Command Group Accessor Aliases
alias mycmd:command_group.is_command_group='mycmd:registered_item.is_command_group'
alias mycmd:command_group.get_name='mycmd:registered_item.get_name'
alias mycmd:command_group.get_fully_qualified_name='mycmd:registered_item.get_fully_qualified_name'
alias mycmd:command_group.get_namespaced_parts_as_string='mycmd:registered_item.get_namespaced_parts_as_string'
alias mycmd:command_group.get_parent_command_group_fully_qualified_name='mycmd:registered_item.get_parent_command_group_fully_qualified_name'
alias mycmd:command_group.get_source_directory='mycmd:registered_item.get_source_directory'
alias mycmd:command_group.get_source_file_path='mycmd:registered_item.get_source_file_path'
alias mycmd:command_group.get_short_description='mycmd:registered_item.get_short_description'
alias mycmd:command_group.get_help_text='mycmd:registered_item.get_help_text'
alias mycmd:command_group.get_version='mycmd:registered_item.get_version'
alias mycmd:command_group.is_metadata_loaded='mycmd:registered_item.is_metadata_loaded'

# ------------------------------------------------------------------------------
# Command Group Loading Alias
alias mycmd:command_group.load_command_group='mycmd:registered_item.load_item'

# ------------------------------------------------------------------------------
# Command Group Help Printing
alias mycmd:command_group.print_version='mycmd:registered_item.print_item_version'
alias mycmd:command_group.print_help='mycmd:registered_item.print_item_help'

function mycmd:command_group.print_version_by_name() {
    local -r fully_qualified_name="${1}"
    # shellcheck disable=SC2034
    local -A command_group

    if ! mycmd:registry.get_command_group "${fully_qualified_name}" command_group; then
        mycmd.debug "Unknown command group '${fully_qualified_name}'."
        return 1
    fi

    mycmd:command_group.print_version command_group
}

function mycmd:command_group.print_help_by_name() {
    local -r fully_qualified_name="${1}"
    # shellcheck disable=SC2034
    local -A command_group

    if ! mycmd:registry.get_command_group "${fully_qualified_name}" command_group; then
        mycmd.debug "Unknown command group '${fully_qualified_name}'."
        return 1
    fi

    mycmd:command_group.print_help command_group
    mycmd:command_group._print_child_command_groups_help_section "${fully_qualified_name}"
    mycmd:command_group._print_child_commands_help_section "${fully_qualified_name}"
}

function mycmd:command_group._print_child_command_groups_help_section() {
    local -r fully_qualified_name="${1}"
    local -a child_command_groups

    mycmd:registry.get_child_command_groups "${fully_qualified_name}" child_command_groups

    if (("${#child_command_groups[@]}" == 0)); then
        mycmd.trace "No child command groups to display."
        return 0
    fi

    local -A table=()

    local child_fully_qualified_name
    for child_fully_qualified_name in "${child_command_groups[@]}"; do
        # shellcheck disable=SC2034
        local -A child=()
        if ! mycmd:registry.get_command_group "${child_fully_qualified_name}" child; then
            mycmd.debug "Error getting child command group '${child_fully_qualified_name}'"
            return 1
        fi

        local name
        name="$(mycmd:command_group.get_name child)"

        local short_description
        short_description="$(mycmd:command_group.get_short_description child)"

        # shellcheck disable=SC2034
        table["${name}"]="${short_description}"
    done

    mycmd.print_table table \
        "The following child command groups are defined:" \
        "Group Name" \
        "Description"
}

function mycmd:command_group._print_child_commands_help_section() {
    local -r fully_qualified_name="${1}"
    local -a child_commands

    mycmd:registry.get_child_commands "${fully_qualified_name}" child_commands

    if (("${#child_commands[@]}" == 0)); then
        mycmd.trace "No child commands to display."
        return 0
    fi

    local -A table=()

    local child_fully_qualified_name
    for child_fully_qualified_name in "${child_commands[@]}"; do
        # shellcheck disable=SC2034
        local -A child=()
        if ! mycmd:registry.get_command "${child_fully_qualified_name}" child; then
            mycmd.debug "Error getting child command '${child_fully_qualified_name}'"
            return 1
        fi

        local name
        name="$(mycmd:command.get_name child)"

        local short_description
        short_description="$(mycmd:command.get_short_description child)"

        # shellcheck disable=SC2034
        table["${name}"]="${short_description}"
    done

    mycmd.print_table table \
        "The following child commands are defined:" \
        "Command Name" \
        "Description"
}

# ------------------------------------------------------------------------------
# Command Group Support Library Loading Functions
function mycmd:command_group.load_support_lib() {
    local -r support_library_name="${1}"

    local fully_qualified_name
    if ! fully_qualified_name="$(mycmd._dispatch_with_calling_file mycmd:registry.get_command_group_from_file)"; then
        mycmd.debug "Error getting command group from file '${BASH_SOURCE[1]}'."
        return 1
    fi
    readonly fully_qualified_name

    # shellcheck disable=SC2034
    local -A command_group_struct
    if ! mycmd:registry.get_command_group "${fully_qualified_name}" command_group_struct; then
        mycmd.debug "Error getting command group struct for '${fully_qualified_name}'."
        return 1
    fi

    local support_library_file_name
    if ! support_library_file_name="$(mycmd:command_group._get_support_library_file_name command_group_struct "${support_library_name}")"; then
        mycmd.debug "Error getting support library file name for '${support_library_name}'."
        return 1
    fi
    readonly support_library_file_name

    local source_directory
    source_directory="$(mycmd:command_group.get_source_directory command_group_struct)"
    readonly source_directory

    local support_library_full_path
    if ! support_library_full_path="$(mycmd.find_support_library_for_command_group "${fully_qualified_name}" "${source_directory}" "${support_library_file_name}")"; then
        mycmd.debug "Error finding support library '${support_library_file_name}' for command group '${fully_qualified_name}'."
        return 1
    fi
    readonly support_library_full_path

    if ! mycmd.source_lib_by_path_if_found "${support_library_full_path}"; then
        mycmd.debug "Error loading support library '${support_library_full_path}' for command group '${fully_qualified_name}'."
        return 1
    fi

    return 0
}

function mycmd:command_group._get_support_library_file_name() {
    # shellcheck disable=SC2178
    local -n command_group_struct_ref="${1}"
    local -r support_library_name="${2}"

    local command_group_name
    command_group_name="$(mycmd:command_group.get_name "${!command_group_struct_ref}")"
    readonly command_group_name

    echo "${command_group_name}-${support_library_name}-lib"
}

# ------------------------------------------------------------------------------
# Command Group Config and Cache File Functions
function mycmd:command_group.get_cache_file() {
    local -r cache_file_name="${1}"

    local fully_qualified_name
    if ! fully_qualified_name="$(mycmd._dispatch_with_calling_file mycmd:registry.get_command_group_from_file)"; then
        mycmd.debug "Error getting command group from file '${BASH_SOURCE[1]}'."
        return 1
    fi
    readonly fully_qualified_name

    mycmd.get_user_cache_file "${fully_qualified_name}" "${cache_file_name}"
}

function mycmd:command_group.get_config_file() {
    local -r config_file_name="${1}"

    local fully_qualified_name
    if ! fully_qualified_name="$(mycmd._dispatch_with_calling_file mycmd:registry.get_command_group_from_file)"; then
        mycmd.debug "Error getting command group from file '${BASH_SOURCE[1]}'."
        return 1
    fi
    readonly fully_qualified_name

    mycmd.get_user_config_file "${fully_qualified_name}" "${config_file_name}"
}

mycmd.trace "The MyCmd Command Group support library has been sourced."
