# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Pathname Support Library
#   Support for handling pathnames for MyCmd

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_PATHNAME_LIB:-}" ]] && return
readonly _MYCMD_PATHNAME_LIB=1

if [[ ! -v _MYCMD_LIB_DIR ]]; then
    readonly _MYCMD_PATHNAME_LIB_SELF_FILE="${BASH_SOURCE[0]}"
    _MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_PATHNAME_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly _MYCMD_LIB_DIR
fi

# ------------------------------------------------------------------------------
# Source Required Support Libraries
if [[ ! -v _MYCMD_LOADING_LIB ]]; then
    # shellcheck source=./mycmd-loading-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-lib"
fi

mycmd.load_mycmd_lib_support_lib "output"
mycmd.load_mycmd_lib_support_lib "environment"
mycmd.load_mycmd_lib_support_lib "event-lifecycle"
mycmd.load_mycmd_lib_support_lib "platform-support"

function mycmd:pathname.is_valid_absolute_path() {
    [[ "${1}" = /* ]] && [[ "${1}" != *..* ]] && [[ -e "${1}" ]]
}

function mycmd:pathname.is_valid_absolute_path_of_executable_file() {
    [[ "${1}" = /* ]] && [[ "${1}" != *..* ]] && [[ -f "${1}" ]] && [[ -x "${1}" ]]
}

function mycmd:pathname.is_valid_absolute_path_of_directory() {
    [[ "${1}" = /* ]] && [[ "${1}" != *..* ]] && [[ -d "${1}" ]]
}

mycmd.init_bin realpath
function mycmd:pathname.canonicalize_path() {
    local -r path_to_resolve="${1}"

    mycmd.bin_execute realpath --canonicalize-existing --quiet --logical "${path_to_resolve}"
}

function mycmd:pathname.canonicalize_path_missing_ok() {
    local -r path_to_resolve="${1}"

    mycmd.bin_execute realpath --canonicalize-missing --quiet --logical "${path_to_resolve}"
}

mycmd.init_bin realpath
function mycmd:pathname.path_relative_to_directory() {
    local -r full_path="${1}"
    local -r base_path="${2}"

    if ! mycmd:pathname.is_valid_absolute_path "${full_path}"; then
        mycmd.debug "'${full_path}' is not a valid absolute path."
        return 1
    fi

    if ! mycmd:pathname.is_valid_absolute_path_of_directory "${base_path}"; then
        mycmd.debug "'${base_path}' is not a valid absolute path of a directory."
        return 1
    fi

    local relative_path
    if ! relative_path="$(mycmd.bin_execute realpath --relative-to="${base_path}" "${full_path}")"; then
        mycmd.debug "Error getting relative path for '${full_path}' relative to '${base_path}'."
        return 1
    fi
    readonly relative_path

    # If the relative path starts with .., it is not a descendant
    if [[ "${relative_path}" = ..* ]]; then
        return 1
    else
        echo "${relative_path}"
        return 0
    fi
}

function mycmd:pathname.fully_qualified_name_for_path() {
    local -r full_path="${1}"

    if ! mycmd:pathname.is_valid_absolute_path "${full_path}"; then
        mycmd.debug "'${full_path}' is not a valid absolute path."
        return 1
    fi

    local base
    # shellcheck disable=SC2154
    for base in "${_MYCMD_SEARCH_PATH[@]}"; do
        local relative_path

        if relative_path=$(mycmd:pathname.path_relative_to_directory "${full_path}" "${base}"); then
            if [[ "${relative_path}" = "." ]]; then
                echo "mycmd"
            else
                echo "mycmd/${relative_path}"
            fi

            return 0
        fi
    done

    # No matches
    return 1
}

function mycmd:pathname.is_child_of_mycmd_path_directory() {
    local -r full_path="${1}"

    if ! mycmd:pathname.fully_qualified_name_for_path "${full_path}" >/dev/null; then
        mycmd.debug "'${full_path}' is not a child of any of the MyCmd base directories."
        return 1
    fi

    return 0
}

function mycmd:pathname.nullglob_set_wrapper() {
    local nullglob_set
    if shopt -q nullglob; then
        nullglob_set=0
    else
        nullglob_set=1
        shopt -s nullglob
    fi
    readonly nullglob_set

    result=0
    "${@}" || result=$?

    # unset nullglob if it wasn't originally set
    if ((nullglob_set == 1)); then
        shopt -u nullglob
    fi

    return "${result}"
}

function mycmd:pathname.gather_files_and_directories() {
    local -r absolute_path="${1}"

    local f
    for f in "${absolute_path}"/*; do
        echo "${f}"
    done
}

function mycmd:pathname.walk_path_for_directory() {
    local -r absolute_path="${1}"
    local -r fully_qualifed_name="${2}"
    local -r callback="${3}"

    local -a dirs=()
    local -a files=()
    local -a child_paths

    readarray -t child_paths < <(mycmd:pathname.nullglob_set_wrapper mycmd:pathname.gather_files_and_directories "${absolute_path}" || true)
    local f

    for f in "${child_paths[@]}"; do
        mycmd.trace "Processing '${f}'."

        # TODO: Add support for symlinks?
        if [[ -d "${f}" ]]; then
            dirs+=("${f}")
        elif [[ -f "${f}" ]]; then
            files+=("${f}")
        fi
    done

    if (("${#dirs[@]}" > 0 || "${#files[@]}" > 0)); then
        if ! "${callback}" "${absolute_path}" "${fully_qualifed_name}" dirs files; then
            mycmd.debug "Error in callback for ${absolute_path}."
        fi
    fi

    local dir
    local dir_name
    for dir in "${dirs[@]}"; do
        if ! dir_name="$(basename "${dir}")"; then
            mycmd.debug "Error getting basename of '${dir}'."
            return 1
        fi

        mycmd:pathname.walk_path_for_directory "${dir}" "${fully_qualifed_name}/${dir_name}" "${callback}"
    done

    return 0
}

function mycmd:pathname.walk_path() {
    # TODO: Verify this argument fits the pattern of a fully qualified path
    local -r fully_qualifed_name="${1}"
    local -r callback="${2}"

    # Strip the leading mycmd from the fully qualified name
    local realtive_path="${fully_qualifed_name#mycmd/}"
    realtive_path="${fully_qualifed_name#mycmd}"

    local base
    local full_path
    for base in "${_MYCMD_SEARCH_PATH[@]}"; do
        full_path="${base}${relative_path:+/}${realtive_path}"

        if [[ -d "${full_path}" ]]; then
            mycmd:pathname.walk_path_for_directory "${full_path}" "${fully_qualifed_name}" "${callback}"
        fi
    done
}

function mycmd:pathname.find_support_library_for_command_group() {
    local -r fully_qualified_name="${1}"
    local -r command_group_source_directory="${2}"
    local -r support_library_file_name="${3}"

    # Strip the leading mycmd from the fully qualified name
    local realtive_path="${fully_qualified_name#mycmd/}"
    realtive_path="${fully_qualified_name#mycmd}"

    local base
    local full_path
    local start=false
    for base in "${_MYCMD_SEARCH_PATH[@]}"; do
        full_path="${base}${relative_path:+/}${realtive_path}"

        if [[ -d "${full_path}" ]]; then
            if [[ "${full_path}" = "${command_group_source_directory}" ]]; then
                start=true
            fi

            if [[ "${start}" == "true" ]]; then
                local support_library_path="${full_path}/${support_library_file_name}"
                if [[ -f "${support_library_path}" ]]; then
                    echo "${support_library_path}"
                    return 0
                fi
            fi
        fi
    done

    return 1
}

mycmd.trace "The MyCmd Pathname support library has been sourced."
