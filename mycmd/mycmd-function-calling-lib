# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Library Function Calling Support Library
#   Support for Miscellaneous Function Calling Support Functions for MyCmd

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_FUNCTION_CALLING_LIB:-}" ]] && return
readonly _MYCMD_FUNCTION_CALLING_LIB=1

if [[ ! -v _MYCMD_LIB_DIR ]]; then
    readonly _MYCMD_FUNCTION_CALLING_LIB_SELF_FILE="${BASH_SOURCE[0]}"
    _MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_FUNCTION_CALLING_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly _MYCMD_LIB_DIR
fi

# ------------------------------------------------------------------------------
# Source Required Support Libraries

if [[ ! -v _MYCMD_OUTPUT_LIB ]]; then
    # shellcheck source=./mycmd-output-lib
    source "${_MYCMD_LIB_DIR}/mycmd-output-lib"
fi

# ------------------------------------------------------------------------------
# Convenience methods for calling functions

# mycmd.function_exists
#   Test whether the specified shell function has been defined
function mycmd.function_exists() {
    declare -F "$1" >/dev/null
}

# mycmd.call_if_function_exists
#  	If the named function exists, call with the subsequent arguments. Otherwise,
#  	do nothing.
function mycmd.call_if_function_exists() {
    local -r fn=$1
    shift

    if mycmd.function_exists "${fn}"; then
        "${fn}" "$@"
    fi
}

mycmd.trace "The MyCmd Function Calling support library has been sourced."
