# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# MyCmd Registry Support Library
#   Support for the MyCmd Registry of all discovered Command Groups and Commands

set -o nounset -o errexit -o errtrace -o pipefail

(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_REGISTRY_LIB:-}" ]] && return
readonly _MYCMD_REGISTRY_LIB=1

if [[ ! -v _MYCMD_LIB_DIR ]]; then
    readonly _MYCMD_REGISTRY_LIB_SELF_FILE="${BASH_SOURCE[0]}"
    _MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_REGISTRY_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly _MYCMD_LIB_DIR
fi

# ------------------------------------------------------------------------------
# Source Required Support Libraries
if [[ ! -v _MYCMD_LOADING_LIB ]]; then
    # shellcheck source=./mycmd-loading-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-lib"
fi

mycmd.load_mycmd_lib_support_lib "function-calling"
mycmd.load_mycmd_lib_support_lib "output"
mycmd.load_mycmd_lib_support_lib "pathname"

# ------------------------------------------------------------------------------
## The MyCmd Registry
readonly _MYCMD_COMMAND_GROUP_TYPE='MyCmd Command Group'
readonly _MYCMD_COMMAND_TYPE='MyCmd Command'

# ------------------------------------------------------------------------------
# Global Registry Arrays
declare -agx _MYCMD_COMMAND_GROUPS=()
declare -agx _MYCMD_COMMANDS=()

declare -Agx _MYCMD_ITEM_TYPES=()
declare -Agx _MYCMD_ITEM_SOURCE_DIRECTORIES=()
declare -Agx _MYCMD_ITEM_SOURCE_FILE_PATHS=()
declare -Agx _MYCMD_ITEM_PARENT_COMMAND_GROUPS=()
declare -Agx _MYCMD_ITEM_SHORT_DESCRIPTIONS=()
declare -Agx _MYCMD_ITEM_HELP_TEXTS=()
declare -Agx _MYCMD_ITEM_VERSIONS=()
declare -Agx _MYCMD_ITEM_METADATA_LOADED=()

# ------------------------------------------------------------------------------
# MyCmd Registry Discovery Functions
function mycmd:registry.discover_command_groups_and_commands() {
    mycmd.walk_path "mycmd" mycmd:registry._discover_command_groups_and_commands_callback
}

function mycmd:registry._discover_command_groups_and_commands_callback() {
    local -r full_path="${1}"
    local -r fully_qualified_name="${2}"
    # The directories are not currently used
    local -n _dirs_ref="${3}"
    local -n files_ref="${4}"

    if ! mycmd:registry._register_command_group "${fully_qualified_name}" "${full_path}"; then
        mycmd.log "Error loading command group '${fully_qualified_name}' from '${full_path}'."
        return 1
    fi

    local f
    local file_fully_qualified_name
    local file_name
    for f in "${files_ref[@]}"; do
        if ! file_name="$(basename "${f}")"; then
            mycmd.log "Error getting basename of '${f}'."
            return 1
        fi

        file_fully_qualified_name="${fully_qualified_name}/${file_name}"

        if ! mycmd:registry._register_command "${file_fully_qualified_name}" "${f}"; then
            mycmd.log "Error loading command '${file_fully_qualified_name}' from '${f}'."
            return 1
        fi
    done
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Public Registration Functions
function mycmd:registry.register_version() {
    if [[ ! -v _MYCMD_SOURCING_FOR_HELP && ! -v _MYCMD_FULLY_QUALIFIED_NAME && ! -v _MYCMD_NAMESPACED_PARTS_STRING ]]; then
        mycmd.debug "Error: _MYCMD_SOURCING_FOR_HELP, _MYCMD_FULLY_QUALIFIED_NAME, and _MYCMD_NAMESPACED_PARTS_STRING must be set."
        return 1
    fi

    local -r version="${1}"
    _MYCMD_ITEM_VERSIONS["${_MYCMD_FULLY_QUALIFIED_NAME}"]="${version}"

    return 0
}

function mycmd:registry.register_short_description() {
    if [[ ! -v _MYCMD_SOURCING_FOR_HELP && ! -v _MYCMD_FULLY_QUALIFIED_NAME && ! -v _MYCMD_NAMESPACED_PARTS_STRING ]]; then
        mycmd.debug "Error: _MYCMD_SOURCING_FOR_HELP, _MYCMD_FULLY_QUALIFIED_NAME, and _MYCMD_NAMESPACED_PARTS_STRING must be set."
        return 1
    fi

    local -r short_description="${1}"
    _MYCMD_ITEM_SHORT_DESCRIPTIONS["${_MYCMD_FULLY_QUALIFIED_NAME}"]="${short_description}"

    return 0
}

function mycmd:registry.register_help_text() {
    if [[ ! -v _MYCMD_SOURCING_FOR_HELP && ! -v _MYCMD_FULLY_QUALIFIED_NAME && ! -v _MYCMD_NAMESPACED_PARTS_STRING ]]; then
        mycmd.debug "Error: _MYCMD_SOURCING_FOR_HELP, _MYCMD_FULLY_QUALIFIED_NAME, and _MYCMD_NAMESPACED_PARTS_STRING must be set."
        return 1
    fi

    local -r help_text="${1}"

    if [[ -v _MYCMD_ITEM_HELP_TEXTS["${_MYCMD_FULLY_QUALIFIED_NAME}"] ]]; then
        local existing="${_MYCMD_ITEM_HELP_TEXTS["${_MYCMD_FULLY_QUALIFIED_NAME}"]}"
        _MYCMD_ITEM_HELP_TEXTS["${_MYCMD_FULLY_QUALIFIED_NAME}"]="${existing}\n${help_text}"
    else
        _MYCMD_ITEM_HELP_TEXTS["${_MYCMD_FULLY_QUALIFIED_NAME}"]="${help_text}"
    fi

    return 0
}

function mycmd:registry.register_mycmd_help_and_version() {
    local -r short_description="${1}"
    local -r help_text="${2}"
    local -r version="${3}"

    declare -gx _MYCMD_SOURCING_FOR_HELP=1
    declare -gx _MYCMD_FULLY_QUALIFIED_NAME="mycmd"
    declare -gx _MYCMD_NAMESPACED_PARTS_STRING="mycmd"

    mycmd:registry.register_short_description "${short_description}"
    mycmd:registry.register_help_text "${help_text}"
    mycmd:registry.register_version "${version}"

    unset _MYCMD_NAMESPACED_PARTS_STRING
    unset _MYCMD_FULLY_QUALIFIED_NAME
    unset _MYCMD_SOURCING_FOR_HELP

    _MYCMD_ITEM_METADATA_LOADED["mycmd"]=1

    return 0
}

function mycmd:registry.find_matching_command_for_path() {
    local -r source_path="${1}"

    mycmd.trace "Finding matching command for path '${source_path}'."

    local absolute_source_path
    if ! absolute_source_path="$(mycmd.canonicalize_path "${source_path}")"; then
        mycmd.debug "Error getting absolute path for '${source_path}'."
        return 1
    fi
    readonly absolute_source_path

    mycmd.trace "Absolute path for '${source_path}' is '${absolute_source_path}'."

    local fully_qualified_name
    local command_source_path

    for fully_qualified_name in "${_MYCMD_COMMANDS[@]}"; do
        command_source_path="${_MYCMD_ITEM_SOURCE_FILE_PATHS["${fully_qualified_name}"]}"

        mycmd.trace "Trying to match '${fully_qualified_name}' with source path '${command_source_path}'."

        if [[ "${command_source_path}" == "${absolute_source_path}" ]]; then
            echo "${fully_qualified_name}"
            return 0
        fi
    done

    return 1
}

function mycmd:registry.get_command_group_from_file() {
    local -r source_file_path="${1}"

    if ! [[ "${source_file_path}" =~ -lib$ ]]; then
        mycmd.debug "'${source_file_path}' is not a Command Group or Command Group Support Library."
        return 1
    fi

    # Checking against the source directory instead of the source file to allow this to be called
    # for either command groups or command group support libraries
    local source_directory
    source_directory="$(dirname "${source_file_path}")"
    readonly source_directory

    local fully_qualified_name
    local potential_source_directory

    for fully_qualified_name in "${_MYCMD_COMMAND_GROUPS[@]}"; do
        potential_source_directory="${_MYCMD_ITEM_SOURCE_DIRECTORIES["${fully_qualified_name}"]}"

        if [[ "${potential_source_directory}" == "${source_directory}" ]]; then
            echo "${fully_qualified_name}"
            return 0
        fi
    done

    mycmd.debug "No command group found for source file '${source_file_path}'."

    return 1
}

function mycmd:registry.command_group_exists_for_fully_qualified_name() {
    mycmd:registry._item_exists_for_fully_qualified_name \
        "${_MYCMD_COMMAND_GROUP_TYPE}" \
        "${@}"
}

function mycmd:registry.command_exists_for_fully_qualified_name() {
    mycmd:registry._item_exists_for_fully_qualified_name \
        "${_MYCMD_COMMAND_TYPE}" \
        "${@}"
}

function mycmd:registry._item_exists_for_fully_qualified_name() {
    local -r item_type="${1}"
    local -r fully_qualified_name="${2}"

    mycmd.trace "Attempting to get '${fully_qualified_name}' of type '${item_type}'."

    if [[ ! -v _MYCMD_ITEM_TYPES[${fully_qualified_name}] ]]; then
        mycmd.debug "Unknown item: '${fully_qualified_name}'."
        return 1
    fi

    local -r registered_type="${_MYCMD_ITEM_TYPES[${fully_qualified_name}]}"
    if [[ "${registered_type}" != "${item_type}" ]]; then
        mycmd.debug "Item '${fully_qualified_name}' has registered type '${registered_type}', not '${item_type}'."
        return 1
    fi

    return 0
}

# ------------------------------------------------------------------------------
# MyCmd Registry Command Group Child Functions
function mycmd:registry.get_child_command_groups() {
    mycmd:registry._get_children_of_command_group \
        "${_MYCMD_COMMAND_GROUP_TYPE}" \
        "${@}"
}

function mycmd:registry.get_child_commands() {
    mycmd:registry._get_children_of_command_group \
        "${_MYCMD_COMMAND_TYPE}" \
        "${@}"
}

function mycmd:registry._get_children_of_command_group() {
    local -r item_type="${1}"
    local -r fully_qualified_name="${2}"
    local -n children_array_ref="${3}"

    if ! mycmd:registry.command_group_exists_for_fully_qualified_name "${fully_qualified_name}"; then
        mycmd.debug "'${fully_qualified_name}' is not a command group."
        return 1
    fi

    local -a children=()
    local child_fully_qualified_name
    local parent_fully_qualified_name
    local child_type

    for child_fully_qualified_name in "${!_MYCMD_ITEM_PARENT_COMMAND_GROUPS[@]}"; do
        parent_fully_qualified_name="${_MYCMD_ITEM_PARENT_COMMAND_GROUPS["${child_fully_qualified_name}"]}"
        child_type="${_MYCMD_ITEM_TYPES["${child_fully_qualified_name}"]}"

        if [[ ("${parent_fully_qualified_name}" == "${fully_qualified_name}") && "${child_type}" = "${item_type}" ]]; then
            children+=("${child_fully_qualified_name}")
        fi
    done

    if (("${#children[@]}" == 0)); then
        children_array_ref=()
        return 0
    fi

    # shellcheck disable=SC2034
    readarray -t children_array_ref < \
        <(printf "%s\n" "${children[@]}" \
            | LC_ALL=en_US.UTF-8 sort || true)
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Private Registration Helper Functions
function mycmd:registry._register_command_group() {
    local -r fully_qualified_name="${1}"
    local -r source_directory="${2}"

    # If this is called by mycmd.walk_path, assuming directory paths are real and on the MyCmd Search Path
    if mycmd.is_called_by_function "mycmd.walk_path"; then
        mycmd.trace "Skipping validation of parameters, assuming they are valid, as called from 'mycmd.walk_path'."
    else
        if ! mycmd:registry._validate_directory_contains_command_group "${source_directory}"; then
            mycmd.debug "Directory ${source_directory} does not contain a command group."
            return 0
        fi
    fi

    local source_file_path
    if ! source_file_path="$(mycmd:registry._command_group_source_file_path_for_directory "${source_directory}")"; then
        mycmd.debug "Error getting source file name for command group library '${source_directory}'."
        return 1
    fi
    readonly source_file_path

    if [[ ! -e "${source_file_path}" ]]; then
        mycmd.debug "Expected command group library file '${source_file_path}' does not exist, '${fully_qualified_name}' is not a command group."
        return 0
    fi

    if ! mycmd:registry._register_item \
        _MYCMD_COMMAND_GROUPS \
        "${_MYCMD_COMMAND_GROUP_TYPE}" \
        "${fully_qualified_name}" \
        "${source_directory}" \
        "${source_file_path}"; then
        mycmd.debug "Error registering command group '${fully_qualified_name}'."
        return 1
    fi

    return 0
}

function mycmd:registry._register_command() {
    local -r fully_qualified_name="${1}"
    local -r source_file_path="${2}"

    if ! mycmd:registry._file_is_command "${source_file_path}"; then
        mycmd.debug "'${source_file_path}' is not a valid command."
        return 0
    fi

    local -r source_directory="$(dirname "${source_file_path}")"

    if ! mycmd:registry._register_item \
        _MYCMD_COMMANDS \
        "${_MYCMD_COMMAND_TYPE}" \
        "${fully_qualified_name}" \
        "${source_directory}" \
        "${source_file_path}"; then
        mycmd.debug "Error registering command '${fully_qualified_name}'."
        return 1
    fi

    return 0
}

function mycmd:registry._register_item() {
    local -n item_list_ref="${1}"
    local -r item_type="${2}"
    local -r fully_qualified_name="${3}"
    local -r source_directory="${4}"
    local -r source_file_path="${5}"

    if [[ -v _MYCMD_ITEM_TYPES[${fully_qualified_name}] ]]; then
        local -r existing_item_type="${_MYCMD_ITEM_TYPES[${fully_qualified_name}]}"

        if [[ "${existing_item_type}" != "${item_type}" ]]; then
            mycmd.debug "Item at '${fully_qualified_name}' already registered, but of type '${existing_item_type}', not '${item_type}'."
            return 1
        fi
    fi

    if [[ -v _MYCMD_ITEM_SOURCE_DIRECTORIES[${fully_qualified_name}] ]]; then
        local -r existing_source_directory="${_MYCMD_ITEM_SOURCE_DIRECTORIES[${fully_qualified_name}]}"

        if [[ "${existing_source_directory}" != "${source_directory}" ]]; then
            mycmd.debug "Item already registered at '${fully_qualified_name}' with source directory '${existing_source_directory}', not '${source_directory}'."
            return 1
        fi
    fi

    if [[ -v _MYCMD_ITEM_SOURCE_FILE_PATHS[${fully_qualified_name}] ]]; then
        local -r existing_source_file_path="${_MYCMD_ITEM_SOURCE_FILE_PATHS[${fully_qualified_name}]}"

        if [[ "${existing_source_file_path}" != "${source_file_path}" ]]; then
            mycmd.debug "Item already registered at '${fully_qualified_name}' with source file '${existing_source_file_path}', not '${source_file_path}'."
            return 1
        else
            mycmd.debug "Item '${fully_qualified_name}' has already been registered."
            return 0
        fi
    fi

    local parent_command_group
    if ! parent_command_group="$(dirname "${fully_qualified_name}")"; then
        mycmd.debug "Error getting parent command group for '${fully_qualified_name}'."
        return 1
    fi
    readonly parent_command_group

    item_list_ref+=("${fully_qualified_name}")
    _MYCMD_ITEM_TYPES["${fully_qualified_name}"]="${item_type}"
    _MYCMD_ITEM_SOURCE_DIRECTORIES["${fully_qualified_name}"]="${source_directory}"
    _MYCMD_ITEM_SOURCE_FILE_PATHS["${fully_qualified_name}"]="${source_file_path}"

    # dirname for 'mycmd' will be '.'
    if [[ "${parent_command_group}" != "." ]]; then
        _MYCMD_ITEM_PARENT_COMMAND_GROUPS["${fully_qualified_name}"]="${parent_command_group}"
    fi

    return 0
}

function mycmd:registry._command_group_source_file_path_for_directory() {
    local -r source_directory="${1}"

    local name
    if ! name="$(basename "${source_directory}")"; then
        mycmd.debug "Error getting basename of '${source_directory}'."
        return 1
    fi
    readonly name

    local -r source_file_path="${source_directory}/${name}-lib"
    echo "${source_file_path}"
    return 0
}

function mycmd:registry._validate_directory_contains_command_group() {
    # A directory is a command group if:
    # - it is valid directory
    # - it is a child of one of the top-level MyCmd directories on the path
    # - it has a file named <command-group>/<command-group>-lib matching the directory
    local -r source_directory="${1}"

    if ! mycmd.is_valid_absolute_path_of_directory "${source_directory}"; then
        mycmd.debug "${source_directory} is not a valid absolute path of a directory."
        return 1
    fi

    if ! mycmd.is_child_of_mycmd_path_directory "${source_directory}"; then
        mycmd.debug "${source_directory} is not a descendant of any of the MyCmd base directories."
        return 1
    fi

    local source_file_path
    if ! source_file_path="$(mycmd:registry._command_group_source_file_path_for_directory "${source_directory}")"; then
        mycmd.debug "Error getting source file name for command group library '${source_directory}'."
        return 1
    fi
    readonly source_file_path

    if [[ ! -f "${source_file_path}" ]]; then
        mycmd.debug "Expected command group library file '${source_file_path}' does not exist."
        return 1
    fi

    return 0
}

function mycmd:registry._file_is_command() {
    local -r source_file_path="${1}"

    if ! mycmd.is_valid_absolute_path_of_executable_file "${source_file_path}"; then
        mycmd.debug "'${source_file_path}' is not a valid absolute path of an executable file."
        return 1
    fi

    if mycmd.is_called_by_function "mycmd.walk_path"; then
        mycmd.trace "Skipping validation of file is on MyCmd Search path, assuming it is, as called from 'mycmd.walk_path'."
    else
        if ! mycmd.is_child_of_mycmd_path_directory "${source_file_path}"; then
            mycmd.debug "'${source_file_path}' is not located on the MyCmd Search Path."
            return 1
        fi
    fi

    return 0
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Getter Functions
readonly _ITEM_TYPE_FIELD='item-type'
readonly _ITEM_NAME_FIELD='item-name'
readonly _ITEM_FULLY_QUALIFIED_NAME_FIELD='item-fully-qualified-name'
readonly _ITEM_NAMESPACED_PARTS_STRING_FIELD='item-namespaced-parts-string'
readonly _ITEM_PARENT_COMMAND_GROUP_FIELD='item-parent-command-group'
readonly _ITEM_SOURCE_DIRECTORY_FIELD='item-source-directory'
readonly _ITEM_SOURCE_FILE_PATH_FIELD='item-source-file-path'
readonly _ITEM_SHORT_DESCRIPTION_FIELD='item-short-description'
readonly _ITEM_HELP_TEXT_FIELD='item-help-text'
readonly _ITEM_VERSION_FIELD='item-version'
readonly _ITEM_METADATA_LOADED_FIELD='item-metadata-loaded'

function mycmd:registry.get_command_group() {
    mycmd:registry._get_item \
        "${_MYCMD_COMMAND_GROUP_TYPE}" \
        "${@}"
}

function mycmd:registry.get_command() {
    mycmd:registry._get_item \
        "${_MYCMD_COMMAND_TYPE}" \
        "${@}"
}

function mycmd:registry._get_item() {
    local -r item_type="${1}"
    local -r fully_qualified_name="${2}"
    local -n item_struct_ref="${3}"

    mycmd.trace "Attempting to get '${fully_qualified_name}' of type '${item_type}'."

    if [[ ! -v _MYCMD_ITEM_SOURCE_FILE_PATHS[${fully_qualified_name}] ]]; then
        mycmd.debug "Unknown item: '${fully_qualified_name}'."
        return 1
    fi

    local -r registered_type="${_MYCMD_ITEM_TYPES[${fully_qualified_name}]}"
    if [[ "${registered_type}" != "${item_type}" ]]; then
        mycmd.debug "Item '${fully_qualified_name}' has registered type '${registered_type}', not '${item_type}'."
        return 1
    fi

    mycmd.trace "Returning Item definition:"
    item_struct_ref["${_ITEM_TYPE_FIELD}"]="${registered_type}"
    mycmd.trace "- ${_ITEM_TYPE_FIELD}: ${item_struct_ref["${_ITEM_TYPE_FIELD}"]}"

    item_struct_ref["${_ITEM_NAME_FIELD}"]="$(basename "${fully_qualified_name}")"
    mycmd.trace "- ${_ITEM_NAME_FIELD}: ${item_struct_ref["${_ITEM_NAME_FIELD}"]}"

    item_struct_ref["${_ITEM_FULLY_QUALIFIED_NAME_FIELD}"]="${fully_qualified_name}"
    mycmd.trace "- ${_ITEM_FULLY_QUALIFIED_NAME_FIELD}: ${item_struct_ref["${_ITEM_FULLY_QUALIFIED_NAME_FIELD}"]}"

    local -r namespaced_parts_string="${fully_qualified_name//\// }"
    item_struct_ref["${_ITEM_NAMESPACED_PARTS_STRING_FIELD}"]="${namespaced_parts_string}"
    mycmd.trace "- ${_ITEM_NAMESPACED_PARTS_STRING_FIELD}: ${item_struct_ref["${_ITEM_NAMESPACED_PARTS_STRING_FIELD}"]}"

    if [[ -v _MYCMD_ITEM_PARENT_COMMAND_GROUPS[${fully_qualified_name}] ]]; then
        item_struct_ref["${_ITEM_PARENT_COMMAND_GROUP_FIELD}"]="${_MYCMD_ITEM_PARENT_COMMAND_GROUPS["${fully_qualified_name}"]}"
        mycmd.trace "- ${_ITEM_PARENT_COMMAND_GROUP_FIELD}: ${item_struct_ref["${_ITEM_PARENT_COMMAND_GROUP_FIELD}"]}"
    else
        mycmd.trace "- ${_ITEM_PARENT_COMMAND_GROUP_FIELD}: No value set."
    fi

    item_struct_ref["${_ITEM_SOURCE_DIRECTORY_FIELD}"]="${_MYCMD_ITEM_SOURCE_DIRECTORIES["${fully_qualified_name}"]}"
    mycmd.trace "- ${_ITEM_SOURCE_DIRECTORY_FIELD}: ${item_struct_ref["${_ITEM_SOURCE_DIRECTORY_FIELD}"]}"

    item_struct_ref["${_ITEM_SOURCE_FILE_PATH_FIELD}"]="${_MYCMD_ITEM_SOURCE_FILE_PATHS["${fully_qualified_name}"]}"
    mycmd.trace "- ${_ITEM_SOURCE_FILE_PATH_FIELD}: ${item_struct_ref["${_ITEM_SOURCE_FILE_PATH_FIELD}"]}"

    if [[ -v _MYCMD_ITEM_SHORT_DESCRIPTIONS[${fully_qualified_name}] ]]; then
        item_struct_ref["${_ITEM_SHORT_DESCRIPTION_FIELD}"]="${_MYCMD_ITEM_SHORT_DESCRIPTIONS["${fully_qualified_name}"]}"
        mycmd.trace "- ${_ITEM_SHORT_DESCRIPTION_FIELD}: ${item_struct_ref["${_ITEM_SHORT_DESCRIPTION_FIELD}"]}"
    else
        mycmd.trace "- ${_ITEM_SHORT_DESCRIPTION_FIELD}: No value set."
    fi

    if [[ -v _MYCMD_ITEM_HELP_TEXTS[${fully_qualified_name}] ]]; then
        item_struct_ref["${_ITEM_HELP_TEXT_FIELD}"]="${_MYCMD_ITEM_HELP_TEXTS["${fully_qualified_name}"]}"
        mycmd.trace "- ${_ITEM_HELP_TEXT_FIELD}: ${item_struct_ref["${_ITEM_HELP_TEXT_FIELD}"]}"
    else
        mycmd.trace "- ${_ITEM_HELP_TEXT_FIELD}: No value set."
    fi

    if [[ -v _MYCMD_ITEM_VERSIONS[${fully_qualified_name}] ]]; then
        item_struct_ref["${_ITEM_VERSION_FIELD}"]="${_MYCMD_ITEM_VERSIONS["${fully_qualified_name}"]}"
        mycmd.trace "- ${_ITEM_VERSION_FIELD}: ${item_struct_ref["${_ITEM_VERSION_FIELD}"]}"
    else
        mycmd.trace "- ${_ITEM_VERSION_FIELD}: No value set."
    fi

    if [[ -v _MYCMD_ITEM_METADATA_LOADED[${fully_qualified_name}] ]]; then
        item_struct_ref["${_ITEM_METADATA_LOADED_FIELD}"]=1
        mycmd.trace "- Item metadata has been loaded."
    else
        item_struct_ref["${_ITEM_METADATA_LOADED_FIELD}"]=0
        mycmd.trace "- Item metadata has not been loaded."
    fi
}

function mycmd:registry._reload_item() {
    # shellcheck disable=SC2178
    local -n item_struct_ref="${1}"

    if [[ ! -v item_struct_ref["${_ITEM_TYPE_FIELD}"] ]]; then
        mycmd.debug "Item referenced by item_struct_ref not properly formed."
        return 1
    fi
    local -r item_type="${item_struct_ref["${_ITEM_TYPE_FIELD}"]}"

    if [[ ! -v item_struct_ref["${_ITEM_FULLY_QUALIFIED_NAME_FIELD}"] ]]; then
        mycmd.debug "Item referenced by item_struct_ref not properly formed."
        return 1
    fi
    local -r fully_qualified_name="${item_struct_ref["${_ITEM_FULLY_QUALIFIED_NAME_FIELD}"]}"

    mycmd:registry._get_item \
        "${item_type}" \
        "${fully_qualified_name}" \
        "${!item_struct_ref}"
}

function mycmd.source_mycmd_lib() {
    local -r lib_name="${1}"
    local fully_qualified_name="${lib_name}"
    if [[ ! "${lib_name}" =~ ^mycmd ]]; then
        fully_qualified_name="mycmd/${lib_name}"
    fi
    readonly fully_qualified_name

    local previous_fully_qualified_name
    local previous_namepaced_parts_string

    # Keep currently set values
    if [[ -v _MYCMD_FULLY_QUALIFIED_NAME ]]; then
        previous_fully_qualified_name="${_MYCMD_FULLY_QUALIFIED_NAME}"
        unset _MYCMD_FULLY_QUALIFIED_NAME
    fi

    if [[ -v _MYCMD_NAMESPACED_PARTS_STRING ]]; then
        previous_namepaced_parts_string="${_MYCMD_NAMESPACED_PARTS_STRING}"
        unset _MYCMD_NAMESPACED_PARTS_STRING
    fi

    mycmd:registry.load_command_group_by_name "${fully_qualified_name}"

    # Restore previous values
    if [[ -n "${previous_fully_qualified_name-}" ]]; then
        declare -gx _MYCMD_FULLY_QUALIFIED_NAME="${previous_fully_qualified_name}"
    fi

    if [[ -n "${previous_namepaced_parts_string-}" ]]; then
        declare -gx _MYCMD_NAMESPACED_PARTS_STRING="${previous_namepaced_parts_string}"
    fi
}

function mycmd:registry.load_command_group_by_name() {
    mycmd:registry._load_item_by_name \
        "${_MYCMD_COMMAND_GROUP_TYPE}" \
        "${@}"
}

function mycmd:registry.load_command_by_name() {
    mycmd:registry._load_item_by_name \
        "${_MYCMD_COMMAND_TYPE}" \
        "${@}"
}

function mycmd:registry._load_item_by_name() {
    local -r item_type="${1}"
    local -r fully_qualified_name="${2}"

    mycmd.trace "Attempting to load item '${fully_qualified_name}' with type '${item_type}'."

    # shellcheck disable=SC2034
    local -A item
    if ! mycmd:registry._get_item "${item_type}" "${fully_qualified_name}" item; then
        mycmd.debug "Error getting item '${fully_qualified_name}'."
        return 1
    fi

    mycmd:registered_item.load_item item
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Public Accessor Functions
function mycmd:registered_item.get_type() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_TYPE_FIELD}" \
        "${@}"
}

function mycmd:registered_item.is_command_group() {
    local item_type
    if ! item_type="$(mycmd:registered_item.get_type "${@}")"; then
        mycmd.debug "Error getting type field from item."
        return 1
    fi
    readonly item_type

    [[ "${item_type}" == "${_MYCMD_COMMAND_GROUP_TYPE}" ]]
}

function mycmd:registered_item.is_command() {
    local item_type
    if ! item_type="$(mycmd:registered_item.get_type "${@}")"; then
        mycmd.debug "Error getting type field from item."
        return 1
    fi
    readonly item_type

    [[ "${item_type}" == "${_MYCMD_COMMAND_TYPE}" ]]
}

function mycmd:registered_item.get_name() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_NAME_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_fully_qualified_name() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_FULLY_QUALIFIED_NAME_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_namespaced_parts_as_string() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_NAMESPACED_PARTS_STRING_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_parent_command_group_fully_qualified_name() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_PARENT_COMMAND_GROUP_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_source_directory() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_SOURCE_DIRECTORY_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_source_file_path() {
    mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_SOURCE_FILE_PATH_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_short_description() {
    local short_description

    if short_description="$(mycmd:registered_item._get_optional_field_from_item_struct \
        "${_ITEM_SHORT_DESCRIPTION_FIELD}" \
        "${@}")"; then
        readonly short_description
    else
        local item_type
        item_type="$(mycmd:registered_item.get_type "${@}")"
        readonly item_type

        local namespaced_parts_string
        namespaced_parts_string="$(mycmd:registered_item.get_namespaced_parts_as_string "${@}")"
        # Strip the leading 'mycmd '
        namespaced_parts_string="${namespaced_parts_string#mycmd }"
        readonly namespaced_parts_string

        short_description="${item_type} ${namespaced_parts_string}"
        readonly short_description
    fi

    echo "${short_description}"
    return 0
}

function mycmd:registered_item.get_help_text() {
    mycmd:registered_item._get_optional_field_from_item_struct \
        "${_ITEM_HELP_TEXT_FIELD}" \
        "${@}"
}

function mycmd:registered_item.get_version() {
    local version

    if version="$(mycmd:registered_item._get_optional_field_from_item_struct \
        "${_ITEM_VERSION_FIELD}" \
        "${@}")"; then
        echo "${version}"
        return 0
    else
        echo "Unknown"
        return 0
    fi
}

function mycmd:registered_item.is_metadata_loaded() {
    local is_metadata_loaded
    if ! is_metadata_loaded="$(mycmd:registered_item._get_required_field_from_item_struct \
        "${_ITEM_METADATA_LOADED_FIELD}" \
        "${@}")"; then
        mycmd.debug "Error getting metadata loaded field from registered item."
        return 1
    fi
    readonly is_metadata_loaded

    [[ "${is_metadata_loaded}" == "1" ]]
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Private Accessor Functions
function mycmd:registered_item._get_required_field_from_item_struct() {
    local -r field_name="${1}"
    # shellcheck disable=SC2178
    local -n item_struct_ref="${2}"

    if [[ -v item_struct_ref[${field_name}] ]]; then
        echo "${item_struct_ref["${field_name}"]}"
        return 0
    else
        mycmd.debug "Missing required field '${field_name}'."
        return 1
    fi
}

function mycmd:registered_item._get_optional_field_from_item_struct() {
    local -r field_name="${1}"
    # shellcheck disable=SC2178
    local -n item_struct_ref="${2}"

    if ! mycmd:registered_item._load_item_help_and_version "${!item_struct_ref}"; then
        mycmd.debug "Error loading item help and version information."
        return 1
    fi

    if [[ -v item_struct_ref["${field_name}"] ]]; then
        echo "${item_struct_ref["${field_name}"]}"
        return 0
    else
        local fully_qualified_name
        fully_qualified_name="$(mycmd:registered_item.get_fully_qualified_name "${!item_struct_ref}")"
        readonly fully_qualified_name
        mycmd.trace "No value for '${field_name}' defined for item '${fully_qualified_name}'."
        return 1
    fi
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Public Loading Functions
function mycmd:registered_item.load_item() {
    # shellcheck disable=SC2178
    local -n item_struct_ref="${1}"

    # Get fully qualified name for logging
    local fully_qualified_name
    fully_qualified_name="$(mycmd:registered_item.get_fully_qualified_name "${!item_struct_ref}")"
    readonly fully_qualified_name

    mycmd.trace "Attempting to load item '${fully_qualified_name}'."

    local parent_command_group
    if parent_command_group="$(mycmd:registered_item.get_parent_command_group_fully_qualified_name "${!item_struct_ref}")"; then
        mycmd.trace "Attempting to load parent command group '${parent_command_group}'."

        if ! mycmd:registry.load_command_group_by_name "${parent_command_group}"; then
            mycmd.debug "Error loading parent command group '${parent_command_group}' for '${fully_qualified_name}'."
            return 1
        fi
    else
        mycmd.trace "There is no parent command group to load."
    fi

    local namespaced_parts_string
    namespaced_parts_string="$(mycmd:registered_item.get_namespaced_parts_as_string "${!item_struct_ref}")"
    readonly namespaced_parts_string

    local source_file_path
    source_file_path="$(mycmd:registered_item.get_source_file_path "${!item_struct_ref}")"
    readonly source_file_path

    if ! mycmd:registered_item._source_item "${fully_qualified_name}" "${namespaced_parts_string}" "${source_file_path}"; then
        mycmd.debug "Error loading '${fully_qualified_name}' from '${source_file_path}'."
        return 1
    fi

    return 0
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Private Loading Functions
function mycmd:registered_item._load_item_help_and_version() {
    # shellcheck disable=SC2178
    local -n item_struct_ref="${1}"

    if ! mycmd:registered_item.is_metadata_loaded "${!item_struct_ref}"; then
        mycmd.trace "Item metadata has not been loaded, so loading on demand."

        local fully_qualified_name
        fully_qualified_name="$(mycmd:registered_item.get_fully_qualified_name "${!item_struct_ref}")"
        readonly fully_qualified_name

        local namespaced_parts_string
        namespaced_parts_string="$(mycmd:registered_item.get_namespaced_parts_as_string "${!item_struct_ref}")"
        readonly namespaced_parts_string

        local source_file_path
        source_file_path="$(mycmd:registered_item.get_source_file_path "${!item_struct_ref}")"
        readonly source_file_path

        if ! mycmd:registered_item._source_for_help_and_version "${fully_qualified_name}" "${namespaced_parts_string}" "${source_file_path}"; then
            mycmd.debug "Error loading item help and version for '${fully_qualified_name}'."
            return 1
        fi

        # Reload the item struct to get the updated metadata
        mycmd:registry._reload_item "${!item_struct_ref}"
    fi

    return 0
}

function mycmd:registered_item._source_for_help_and_version() {
    local -r fully_qualified_name="${1}"
    local -r namespaced_parts_string="${2}"
    local -r source_file_path="${3}"

    mycmd.trace "Loading item help and version for '${fully_qualified_name}' from '${source_file_path}'."

    local result=0
    declare -gx _MYCMD_SOURCING_FOR_HELP=1
    if ! mycmd:registered_item._source_item "${fully_qualified_name}" "${namespaced_parts_string}" "${source_file_path}"; then
        mycmd.debug "Error loading item source file '${source_file_path}'."
        return 1
    fi
    unset _MYCMD_SOURCING_FOR_HELP

    if ((result != 0)); then
        return 1
    fi

    _MYCMD_ITEM_METADATA_LOADED["${fully_qualified_name}"]=1

    return 0
}

function mycmd:registered_item._source_item() {
    local -r fully_qualified_name="${1}"
    local -r namespaced_parts_string="${2}"
    local -r source_file_path="${3}"

    local result=0
    declare -gx _MYCMD_FULLY_QUALIFIED_NAME="${fully_qualified_name}"
    declare -gx _MYCMD_NAMESPACED_PARTS_STRING="${namespaced_parts_string}"
    if ! mycmd.source_lib_by_path_if_found "${source_file_path}"; then
        result=1
    fi
    unset _MYCMD_NAMESPACED_PARTS_STRING
    unset _MYCMD_FULLY_QUALIFIED_NAME

    return "${result}"
}

# ------------------------------------------------------------------------------
# MyCmd Registry Item Common Help Printing Functions
function mycmd:registered_item.print_item_version() {
    # shellcheck disable=SC2178
    local -n item_struct_ref="${1}"

    if ! mycmd:registered_item._load_item_help_and_version "${!item_struct_ref}"; then
        mycmd.debug "Error loading item help and version information."
        return 1
    fi

    local namespaced_parts
    namespaced_parts="$(mycmd:registered_item.get_namespaced_parts_as_string "${!item_struct_ref}")"
    readonly namespaced_parts

    local version
    version="$(mycmd:registered_item.get_version "${!item_struct_ref}")"
    readonly version

    mycmd.output "${namespaced_parts} version ${version}"
}

function mycmd:registered_item.print_item_help() {
    # shellcheck disable=SC2178
    local -n item_struct_ref="${1}"

    if ! mycmd:registered_item._load_item_help_and_version "${!item_struct_ref}"; then
        mycmd.debug "Error loading item help and version information."
        return 1
    fi

    mycmd:registered_item.print_item_version "${!item_struct_ref}"
    mycmd.output ""

    local short_description
    short_description="$(mycmd:registered_item.get_short_description "${!item_struct_ref}")"
    readonly short_description

    mycmd.output "${short_description}"

    local help_text
    if help_text="$(mycmd:registered_item.get_help_text "${!item_struct_ref}")"; then
        mycmd.output "\n${help_text}"
    else
        mycmd.trace "No help text defined."
    fi
    readonly help_text
}

mycmd.trace "The MyCmd Registry support library has been sourced."
