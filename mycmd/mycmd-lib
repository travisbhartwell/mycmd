# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# ------------------------------------------------------------------------------
# MyCmd Base Shell Library
#   Library to be sourced with common routines for MyCmd scripts and commands

# ------------------------------------------------------------------------------
# Basic Housekeeping
#
# Set options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

# This library should only be sourced once. Technique borrowed from
# https://stackoverflow.com/a/64534652
[[ -n "${_MYCMD_LIB-}" ]] && return
readonly _MYCMD_LIB=1

readonly _MYCMD_LIB_SELF_FILE="${BASH_SOURCE[0]}"

# _MYCMD_EARLY_SHELL_TRACE and _MYCMD_EARLY_SHELL_VERBOSE are mainly for the ease of debugging
# MyCmd itself; since the MyCmd launcher is also in shell and sources mycmd-lib, if we check
# the user facing variables MYCMD_SHELL_TRACE and MYCMD_SHELL_VERBOSE and set the options here
# the output will have too much of the mechanics of MyCmd itself and not the user's command.
[[ -n "${_MYCMD_EARLY_SHELL_TRACE-}" ]] && set -o xtrace

[[ -n "${_MYCMD_EARLY_SHELL_VERBOSE-}" ]] && set -o verbose

# ------------------------------------------------------------------------------
# Library Protection
function mycmd.capture_defined_functions() {
    local -n array_ref="${1}"
    readarray -t array_ref < <(compgen -A function | sort || true)
}

declare -a _mycmd_lib_functions_before=()
mycmd.capture_defined_functions _mycmd_lib_functions_before

function mycmd.protect_library_functions() {
    local -n before_functions="${1}"
    local -n after_functions="${2}"
    local -A seen_functions=()

    # First add the existing functions to an associative array
    local f
    for f in "${before_functions[@]}"; do
        seen_functions["${f}"]=1
    done

    for f in "${after_functions[@]}"; do
        if [[ ! -v seen_functions["${f}"] ]]; then
            mycmd.trace "Marking function '${f}' read-only."
            readonly -f "${f}"
        fi
    done
}

function mycmd._protect_mycmd_lib() {
    # shellcheck disable=SC2034
    local -a mycmd_lib_functions_after
    mycmd.capture_defined_functions mycmd_lib_functions_after
    mycmd.protect_library_functions _mycmd_lib_functions_before mycmd_lib_functions_after

    unset -f _mycmd_lib_functions_before
}

# ------------------------------------------------------------------------------
# Basic Logging and Output Functions
#
#   These are defined as early as possible to enable to be used through-out this
#   file. See the Additional Logging Support section below for additional
#   functionality.
#
#   In general, use these functions for any output that the user may see, and use
#   echo for interal implementation use for functions that are meant to be called
#   in sub-shells to capture output.

# These file descriptors are set up to make output easier
exec {_MYCMD_OUTPUT_FD}>&1
readonly _MYCMD_OUTPUT_FD
export _MYCMD_OUTPUT_FD

# mycmd.output
#   Convenience for runtime output to stdout. Provided for symmetry in output
#   functions.
function mycmd._output() {
    local -r output_fd="${1}"
    shift

    printf '%b\n' "$*" >&"${output_fd}"
}

# mycmd.output
#   Convenience for runtime output to stdout. Provided for symmetry in output
#   functions.
function mycmd.output() {
    mycmd._output "${_MYCMD_OUTPUT_FD}" "$*"
}

function mycmd._output_with_timestamp() {
    local -r output_fd="${1}"
    shift

    printf '[%(%F %T)T] %b\n' -1 "$*" 1>&"${output_fd}"
}

# mycmd.output_with_timestamp
#   Convenience for runtime output to stdout, with each line prefixed by the
#   current timestamp.
function mycmd.output_with_timestamp() {
    mycmd._output_with_timestamp "${_MYCMD_OUTPUT_FD}" "$*"
}

exec {_MYCMD_LOG_FD}>&2
readonly _MYCMD_LOG_FD
export _MYCMD_LOG_FD

# mycmd.log
#   Convenience for runtime logging to stderr.
function mycmd.log() {
    mycmd._output_with_timestamp "${_MYCMD_LOG_FD}" "$*" 1>&2
}

# mycmd.debug
#   Optionally log when MYCMD_DEBUG is set. Useful for debugging output.
function mycmd.debug() {
    if [[ -n "${MYCMD_DEBUG-}" ]]; then
        mycmd.log "[DEBUG] $*"
    fi
}

# mycmd.trace
#   Optionally log when MYCMD_TRACE is set. Useful for tracing script execution.
function mycmd.trace() {
    if [[ -n "${MYCMD_TRACE-}" ]]; then
        mycmd.log "[TRACE] $*"
    fi
}

# mycmd.err_exit
#   Output an error message to stderr and exit with a non-zero exit code.
#
#   $1 - Exit code to use
#   Remainder - Error message
function mycmd.err_exit() {
    local -r exit_code=$1
    shift

    mycmd.log "$*"
    exit "${exit_code}"
}

# ------------------------------------------------------------------------------
# Validate environment
function mycmd._validate_environment() {
    local mycmd_var

    for mycmd_var in "MYCMD_SYSTEM_BASE_DIR" "MYCMD_USER_BASE_DIR" "MYCMD_VENDOR_DIR"; do
        if [[ -z "${!mycmd_var-}" ]]; then
            mycmd.err_exit 1 "Required environment variable ${mycmd_var} is not set."
        fi
    done
}

mycmd._validate_environment

# ------------------------------------------------------------------------------
# Vendor Library Support
function mycmd.load_vendor_library() {
    local -r vendor_library="${1}"
    # shellcheck disable=SC2154
    local -r vendor_library_path="${MYCMD_VENDOR_DIR}/${vendor_library}"

    if [[ -e "${vendor_library_path}" ]]; then
        mycmd.trace "Loading vendored library '${vendor_library}'."
        # shellcheck source=/dev/null
        source "${vendor_library_path}"
    else
        mycmd.log "Vendored library '${vendor_library}' not found."
        return 1
    fi
}

# ------------------------------------------------------------------------------
# Event Handling Support
if ! mycmd.load_vendor_library "bashup.events"; then
    mycmd.err_exit 1 "Required library missing."
fi

# mycmd.event
#   Simple wrapper around bashup.event to present a consistent
#   interface to MyCmd command implementors.
function mycmd.event() {
    event "${@}"
}

# -------------------------------------------------------------------------------
# Library Deferred Commands Support
#
#   Commands to run after all libraries are sourced

# mycmd._dispatch_with_calling_file
#   Higher order function that passes the full pathname of the shell file that called the
#   function that called  mycmd._dispatch_with_calling_file as the first parameter of the
#   function.
function mycmd._dispatch_with_calling_file() {
    local -r fn=$1
    shift

    local calling_file
    # stack frame 0 - who called me
    # stack frame 1 - who called that
    read -r _ _ calling_file <<<"$(caller 1 || true)"
    # TODO: Do I need to get an abspath?
    readonly calling_file
    mycmd.trace "Dispatching with calling file '${calling_file}'"

    "${fn}" "${calling_file}" "${@}"
}

function mycmd._get_file_startup_event_name() {
    local -r calling_file=${1}
    local -r event_name="${1}:mycmd_startup"

    echo "${event_name}"
}

function mycmd._defer_at_startup() {
    local -r calling_file="${1}"
    shift

    local event_name
    if ! event_name="$(mycmd._get_file_startup_event_name "${calling_file}")"; then
        mycmd.log "Error getting file startup event name"
        return 1
    fi
    readonly event_name

    mycmd.event on "${event_name}" "${@}"
}

# mycmd.defer_at_startup
#  Called with a command to call at the end of evaluating the library.
#
#  These commands are explicitly called by the explicit call to
#  mycmd.run_startup_deferreds at the end of this file.
function mycmd.defer_at_startup() {
    mycmd._dispatch_with_calling_file mycmd._defer_at_startup "${@}"
}

# mycmd.run_startup_deferreds
#   Supports two calling mechanism: one by the library explicitly, like from
#   this file. Or another on behalf of another file.
#
#   A quirk of how mycmd._dispatch_with_calling_file works allows us to be
#   recursive here
# shellcheck disable=SC2120
function mycmd.run_startup_deferreds() {
    if (($# < 1)); then
        mycmd._dispatch_with_calling_file "${FUNCNAME[0]}"
        return $?
    fi

    local -r calling_file="${1}"
    mycmd.trace "Calling deferred startup events for ${calling_file}."

    local event_name
    if ! event_name="$(mycmd._get_file_startup_event_name "${calling_file}")"; then
        mycmd.log "Error getting file startup event name"
        return 1
    fi
    readonly event_name

    if mycmd.event has "${event_name}"; then
        mycmd.trace "Calling deferred startup events for ${calling_file}."
        mycmd.event fire "${event_name}"
    fi
}

# -------------------------------------------------------------------------------
# Library clean up commands support
#   Basic clean up and error handling commands
readonly _MYCMD_EXIT_EVENT="mycmd_exit"

function mycmd.defer_at_exit() {
    mycmd.event on "${_MYCMD_EXIT_EVENT}" "${@}"
}

function mycmd._print_stack_trace() {
    mycmd.trace "Running ${FUNCNAME[0]}, with args '$*'"

    # Disable the trap
    trap - ERR

    # Method borrowed from https://raimonster.com/scripting-field-guide/#org3417a0c
    local return_code=$1

    ((return_code == 0)) && return 0

    mycmd.log "\nThe command ${BASH_COMMAND} triggered a stack trace."

    local -i i
    local -i j

    for i in $(seq 1 $((${#FUNCNAME[@]} - 2))); do
        j=$((i + 1))
        mycmd.log "\t ${BASH_SOURCE[${i}]}: ${FUNCNAME[${i}]}() called in ${BASH_SOURCE[${j}]}:${BASH_LINENO[${i}]}"
    done
}

function mycmd._run_at_exit_deferreds() {
    # Disable the trap handler, including ERR here just in case, as this should be run last
    trap - SIGINT SIGTERM ERR EXIT

    if mycmd.event has "${_MYCMD_EXIT_EVENT}"; then
        mycmd.trace "Calling deferred at exit events."
        mycmd.event fire "${_MYCMD_EXIT_EVENT}"
    fi

    mycmd.trace "All at exit deferreds execution completed."
}

trap 'mycmd._print_stack_trace $?' ERR
trap mycmd._run_at_exit_deferreds SIGINT SIGTERM EXIT

# ------------------------------------------------------------------------------
# Convenience methods for calling functions

# mycmd.function_exists
#   Test whether the specified shell function has been defined
function mycmd.function_exists() {
    declare -F "$1" >/dev/null
}

# mycmd.call_if_function_exists
#  	If the named function exists, call with the subsequent arguments. Otherwise,
#  	do nothing.
function mycmd.call_if_function_exists() {
    local -r fn=$1
    shift

    if mycmd.function_exists "${fn}"; then
        "${fn}" "$@"
    fi
}

# -------------------------------------------------------------------------------
# MyCmd Operating System Support
#   Common variables set according to OS being run on.
_MYCMD_OS="$(uname -s)"
readonly _MYCMD_OS

function mycmd.is_mac_os() {
    [[ "${_MYCMD_OS}" == "Darwin" ]]
}

function mycmd.is_linux() {
    [[ "${_MYCMD_OS}" == "Linux" ]]
}

# ------------------------------------------------------------------------------k
# Convenience methods for locating common utilities cross platform

# MYCMD_BIN
#   An associative array used for dependencies that are in different
#   locations and/or names depending on the platform or host a script is
#   being run on.
#
#     Keys:  command names
#     Value: the path of the given command
declare -Ax MYCMD_BIN

# mycmd._locate_bin
#   If already defined in MYCMD_BIN, return that. Otherwise, attempt to find the given command on the PATH.
#   If found, return the full path.
function mycmd._locate_bin() {
    local -r command=$1
    local command_path

    if [[ -v MYCMD_BIN["${command}"] ]]; then
        command_path="${MYCMD_BIN[${command}]}"
    elif ! command_path=$(command -v "${command}" 2>/dev/null); then
        return 1
    fi

    echo "${command_path}"
}

function mycmd.init_bin_homebrew() {
    local -r command=$1
    local -r exe_name=$2
    local -r long_name=$3
    local -r homebrew_package=$4

    local exe_path
    if exe_path=$(mycmd._locate_bin "${exe_name}"); then
        MYCMD_BIN[${command}]="${exe_path}"
    else
        mycmd.err_exit 1 "Unable to locate ${long_name}, please install from Homebrew with 'brew install ${homebrew_package}'"
    fi
}

# mycmd.init_bin
#  If not already set, attempt to set MYCMD_BIN for the given command name. Will
#  first call mycmd_local.init_bin, if the user has defined mycmd-local-lib, and
#  use the value from there as an override.
#
#  Common commands like sed, which require a different name if using GNU set installed
#  from HomeBrew on Mac OS, are included here.
#
#  It is intended that when this function is callled, the command is a required
#  dependency and thus this will exit with an error if the command cannot be found.
function mycmd.init_bin() {
    local -r command=$1

    mycmd.call_if_function_exists mycmd_local.init_bin "$@"

    [[ -v MYCMD_BIN["${command}"] ]] && {
        mycmd.debug "'${command}' already defined at '${MYCMD_BIN[${command}]}'"
        return 0
    }

    local command_path

    case "${command}+${_MYCMD_OS}" in
        "awk+Darwin")
            mycmd.init_bin_homebrew awk gawk "GNU awk" gawk
            ;;
        "find+Darwin")
            mycmd.init_bin_homebrew find gfind "GNU find" findutils
            ;;
        "realpath+Darwin")
            mycmd.init_bin_homebrew realpath grealpath "GNU realpath" coreutils
            ;;
        "sed+Darwin")
            mycmd.init_bin_homebrew sed gsed "GNU Sed" "gnu-sed"
            ;;
        "stat+Darwin")
            mycmd.init_bin_homebrew sed gstat "GNU Stat" coreutils
            ;;
        "wc+Darwin")
            mycmd.init_bin_homebrew wc gwc "GNU wc" coreutils
            ;;
        "sha1sum+Darwin")
            local shasum_path
            # shasum is the implementation that ships with mac OS. SHA1 is the default algorithm so it is
            # a drop in for most cases
            if shasum_path=$(mycmd._locate_bin shasum); then
                MYCMD_BIN[${command}]="${shasum_path}"
            else
                mycmd.err_exit 1 "Unable to locate shasum"
            fi
            ;;
        *)
            if command_path=$(mycmd._locate_bin "${command}"); then
                MYCMD_BIN[${command}]="${command_path}"
            else
                mycmd.err_exit 1 "Unable to locate path for '${command}'."
            fi
            ;;

    esac
}

function mycmd.bin_execute {
    local -r command="${1}"
    shift

    local command_path
    if ! command_path=$(mycmd._locate_bin "${command}"); then
        mycmd.log "Could not find command '${command}'."
        return 1
    fi
    readonly command_path

    "${command_path}" "${@}"
}

# -------------------------------------------------------------------------------k
# MyCmd Command and Command Group Execution and Loading Support

# mycmd._source_lib_by_path
#   Source the library if it exists.
function mycmd._source_lib_by_path_if_found() {
    local -r library_full_path="${1}"
    shift

    if [[ -e "${library_full_path}" ]]; then
        # shellcheck source=/dev/null
        source "${library_full_path}" "${@}"

        # Run any remaining deferreds for the startup for the library
        mycmd.run_startup_deferreds "${library_full_path}"

        return 0
    else
        return 1
    fi
}

# mycmd.execute_kommand
#  Execute a MyCmd command, given the full path to the command.
function mycmd.execute_command() {
    declare -rx MYCMD_COMMAND_ABSPATH="${1}"
    shift

    if ! mycmd._source_lib_by_path_if_found "${MYCMD_COMMAND_ABSPATH}"; then
        mycmd.err_exit 1 "MyCmd command '${MYCMD_COMMAND_ABSPATH}' not found."
    fi

    if ! mycmd.load_command_group_for_command; then
        mycmd.err_exit 1 "Error loading command group libraries for command '${MYCMD_COMMAND_ABSPATH}'."
    fi

    if ! mycmd.function_exists mycmd.main; then
        mycmd.err_exit 1 "'mycmd.main' not defined in MyCmd command '${MYCMD_COMMAND_ABSPATH}'."
    fi

    mycmd.main "${@}"
}

# mycmd._path_relative_to_directory
#   Given an absolute path to a command or command group, output the relative path to
#   the base directory specified.
#
#   Returns 1 if the specified path is not a descendant of the base directory.
mycmd.defer_at_startup mycmd.init_bin realpath
function mycmd._path_relative_to_directory() {
    local -r full_path="${1}"
    local -r base_path="${2}"

    local relative_path
    if ! relative_path="$(mycmd.bin_execute realpath --relative-to="${base_path}" "${full_path}")"; then
        mycmd.log "Error getting relative path for '${full_path}' relative to '${base_path}'."
        return 1
    fi
    readonly relative_path

    # If the relative path starts with .., it is not a descendant
    if [[ "${relative_path}" = ..* ]]; then
        return 1
    else
        echo "${relative_path}"
        return 0
    fi
}

# mycmd.path_relative_to_mycmd_base_with_command_group
#   Given an absolute path to a command or command group, return the relative path
#   in comparison to either MYCMD_SYSTEM_BASE_DIR or MYCMD_USER_BASE_DIR.
function mycmd.path_relative_to_mycmd_base_with_command_group() {
    # Assume that full_path is going to be a canonicalized absolute path
    local -r full_path="${1}"
    local -r command_group="${2-}"

    local base
    # shellcheck disable=SC2154
    for base in "${MYCMD_SYSTEM_BASE_DIR}" "${MYCMD_USER_BASE_DIR}"; do
        local relative_path
        if relative_path=$(mycmd._path_relative_to_directory "${full_path}" "${base}${command_group:+/}${command_group-}"); then
            echo "${relative_path}"
            return 0
        fi
    done

    return 1
}

# mycmd.path_relative_to_mycmd_base
#   Given an absolute path to a command or command group, return the relative path
#   in comparison to either MYCMD_SYSTEM_BASE_DIR or MYCMD_USER_BASE_DIR.
function mycmd.path_relative_to_mycmd_base() {
    # We assume that full_path is going to be a canonicalized absolute path
    local -r full_path="${1}"

    mycmd.path_relative_to_mycmd_base_with_command_group "${full_path}"
}

# mycmd.running_command_relative_path
function mycmd.running_command_relative_path() {
    if [[ ! -v MYCMD_COMMAND_ABSPATH ]]; then
        mycmd.err_exit 1 "MYCMD_COMMAND_ABSPATH must be set before calling mycmd.running_command_relative_path."
    fi
    local -r running_command_directory="$(dirname "${MYCMD_COMMAND_ABSPATH}")"
    local relative_path

    if relative_path="$(mycmd.path_relative_to_mycmd_base "${running_command_directory}")"; then
        echo "${relative_path}"
        return 0
    else
        mycmd.log "Error getting running command relative path."
        return 1
    fi
}

# mycmd.source_mycmd_lib
#   Explicitly source a MyCmd library and its dependencies by providing the
#   directory name of the MyCmd library relative to either first
#   MYCMD_SYSTEM_BASE_DIR or, secondly, MYCMD_USER_BASE_DIR.
#
#   For example, to source the library in ~/mycmd/requests/service1, call this
#   like this:
#
#   mycmd.source_mycmd_lib "requests/service1"
function mycmd.source_mycmd_lib() {
    local -r library_path="$1"
    shift

    local dir_parts
    # shellcheck disable=SC2162
    IFS="/" read -a dir_parts <<<"${library_path}"
    readonly dir_parts

    # Start at the system base directory
    local lib_dir="${MYCMD_SYSTEM_BASE_DIR}"
    local local_lib_dir="${MYCMD_USER_BASE_DIR}"

    local dir
    for dir in "${dir_parts[@]}"; do
        lib_dir="${lib_dir}/${dir}"
        local_lib_dir="${local_lib_dir}/${dir}"

        # Look for a command group library named <dirname>-lib in <dirname>
        local lib_script="${lib_dir}/${dir}-lib"

        # shellcheck disable=2034
        local -a existing_functions=()
        mycmd.capture_defined_functions existing_functions

        # First check in MYCMD_SYSTEM_BASE_DIR
        if mycmd._source_lib_by_path_if_found "${lib_script}" "${@}"; then
            # shellcheck disable=2034
            local -a current_functions=()
            mycmd.capture_defined_functions current_functions
            mycmd.protect_library_functions existing_functions current_functions

            # If found, source the local overrides file from MYCMD_USER_BASE_DIR, if it exists
            local local_lib_override="${local_lib_dir}/${dir}-local-lib"
            mycmd._source_lib_by_path_if_found "${local_lib_override}" "${@}" || true
        else
            # Otherwise, check in MYCMD_USER_BASE_DIR
            local local_lib_script="${local_lib_dir}/${dir}-lib"
            mycmd._source_lib_by_path_if_found "${local_lib_script}" "${@}" || true
        fi
    done
}

# mycmd.load_command_group_for_command
#  Source the libraries for the command group that the to be executed MyCmd command
#  belongs to.
function mycmd.load_command_group_for_command() {
    local relative_path
    if ! relative_path=$(mycmd.running_command_relative_path); then
        mycmd.err_exit 1 "Error getting running command relative path."
    fi

    if [[ "${relative_path}" == "." ]]; then
        mycmd.trace "No additional libraries to automatically source, command is in system or user base directory."
        return
    fi

    mycmd.source_mycmd_lib "${relative_path}"
}

# ------------------------------------------------------------------------------
# Functions for managing caches and temporary files
case ${_MYCMD_OS} in
    Darwin)
        # https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html#//apple_ref/doc/uid/TP40010672-CH10-SW1
        MYCMD_CACHE_DIR=${HOME}/Library/Caches/mycmd
        ;;

    Linux)
        MYCMD_CACHE_DIR=${HOME}/.cache/mycmd
        ;;

    *)
        mycmd.err_exit 1 "OS ${_MYCMD_OS} is not currently supported."
        ;;
esac
readonly MYCMD_CACHE_DIR

function mycmd._create_cache_dir_if_needed() {
    mycmd.trace "Creating cache directory ${MYCMD_CACHE_DIR} if needed."
    mkdir -p "${MYCMD_CACHE_DIR}" || {
        mycmd.err_exit 1 "Error creating MyCmd cache directory '${MYCMD_CACHE_DIR}'."
    }
}
mycmd.defer_at_startup mycmd._create_cache_dir_if_needed

# mycmd.get_named_cache_file
#   Returns the path name of a file to use for caching from a common cache directory.
#
#   These files are used for caching state in between runs of commands.
function mycmd.get_named_cache_file() {
    mycmd.err_exit 1 "TODO: Not Implemented"
}

# ------------------------------------------------------------------------------
# Finalization and Clean Up
mycmd._protect_mycmd_lib
mycmd.run_startup_deferreds

mycmd.trace "${_MYCMD_LIB_SELF_FILE} sourcing complete."
