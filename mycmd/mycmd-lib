# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# ------------------------------------------------------------------------------
# MyCmd Base Shell Library
#   Library to be sourced with common routines for MyCmd scripts and commands

# ------------------------------------------------------------------------------
# Basic Housekeeping
#
# Set options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# if execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_LIB-}" ]] && return
readonly _MYCMD_LIB=1

readonly _MYCMD_LIB_SELF_FILE="${BASH_SOURCE[0]}"
_MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
readonly _MYCMD_LIB_DIR

# ------------------------------------------------------------------------------
# Source Support Libraries

# Basic Library Loading
if [[ ! -v _MYCMD_LOADING_LIB ]]; then
    # shellcheck source=./mycmd-loading-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-lib"
fi

# Once the Loading Base library is loaded, we can use its functionality to load everything else
# TODO: Minimize this list to only those that are directly called from mycmd-lib
mycmd.load_mycmd_lib_support_lib "output"
mycmd.load_mycmd_lib_support_lib "formatted-output"
mycmd.load_mycmd_lib_support_lib "environment"
mycmd.load_mycmd_lib_support_lib "event-lifecycle"
mycmd.load_mycmd_lib_support_lib "platform-support"
mycmd.load_mycmd_lib_support_lib "pathname"
mycmd.load_mycmd_lib_support_lib "registry"
mycmd.load_mycmd_lib_support_lib "command"
mycmd.load_mycmd_lib_support_lib "command-group"

# ------------------------------------------------------------------------------
# Configuring the MyCmd top-level command group
# TODO: Generate this more intelligently, including snapshot information
declare -rgx _MYCMD_VERSION=0.1
readonly _MYCMD_SHORT_DESCRIPTION="MyCmd: The Bash Command Framework"
readonly _MYCMD_HELP_TEXT="MyCmd is a framework for creating and managing Bash commands and scripts.

Usage:

mycmd [-h | --help] [-v | --version]

mycmd <command_group>... [-h | --help] [-v | --version] [arguments]
      See the help for the individual command groups for further details.

mycmd <command_group>... <command> [-h | --help] [-v | --version] [arguments]
      See the help for the individual sub commands for further details.

The following environment variables are recognized, if set:

MYCMD_SYSTEM_BASE_DIR    - the base directory for system defined MyCmd Command Groups.
MYCMD_USER_BASE_DIR      - the base directory for user defined MyCmd Command Groups. Defaults to ${HOME}/mycmd if not set. This path is required to exist.
MYCMD_SEARCH_PATH        - colon (:) separated list of paths to search for MyCmd Command Groups and Commands.
MYCMD_SHELL_TRACE        - enables Bash's xtrace (set -x) for the executing command.
MYCMD_SHELL_VERBOSE      - enables Bash's verbose mode (set -v) for the executing command.
MYCMD_DEBUG              - enables output of debug logging in the executing command.
MYCMD_TRACE              - enables output of trace logging in the executing command.
MYCMD_LOG_FILE           - filename for MyCmd logging to output to instead of stderr."

function mycmd.register_all_command_groups_and_commands() {
    mycmd:registry.discover_command_groups_and_commands

    mycmd:registry.register_mycmd_help_and_version \
        "${_MYCMD_SHORT_DESCRIPTION}" \
        "${_MYCMD_HELP_TEXT}" \
        "${_MYCMD_VERSION}"
}

# ------------------------------------------------------------------------------
# Finalization and Clean Up
mycmd.register_all_command_groups_and_commands
mycmd._protect_mycmd_lib
mycmd.source_mycmd_local_lib
mycmd.run_startup_deferreds

mycmd.trace "${_MYCMD_LIB_SELF_FILE} sourcing complete."
