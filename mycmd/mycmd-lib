# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

# ------------------------------------------------------------------------------
# MyCmd Base Shell Library
#   Library to be sourced with common routines for MyCmd scripts and commands

# ------------------------------------------------------------------------------
# Basic Housekeeping
#
# Set options for safety
set -o nounset -o errexit -o errtrace -o pipefail

# This file should only be sourced and not executed directly, so exit with error
# with execution is attempted. Technique borrowed from
# https://stackoverflow.com/a/28776166
(return 0 >/dev/null 2>&1) || {
    echo >&2 "$0 is a library only meant to be sourced."
    exit 1
}

[[ -n "${_MYCMD_LIB-}" ]] && return
readonly _MYCMD_LIB=1

readonly _MYCMD_LIB_SELF_FILE="${BASH_SOURCE[0]}"
_MYCMD_LIB_DIR=$(cd "$(dirname "${_MYCMD_LIB_SELF_FILE}")" &>/dev/null && pwd -P)
readonly _MYCMD_LIB_DIR

# ------------------------------------------------------------------------------
# Source Support Libraries

# Basic Library Loading
if [[ ! -v _MYCMD_LOADING_LIB ]]; then
    # shellcheck source=./mycmd-loading-lib
    source "${_MYCMD_LIB_DIR}/mycmd-loading-lib"
fi

# Once the Loading Base library is loaded, we can use its functionality to load everything else
# TODO: Minimize this list to only those that are directly called from mycmd-lib
mycmd.load_mycmd_lib_support_lib "output"
mycmd.load_mycmd_lib_support_lib "environment"
mycmd.load_mycmd_lib_support_lib "event-lifecycle"
mycmd.load_mycmd_lib_support_lib "platform-support"
mycmd.load_mycmd_lib_support_lib "pathname"
mycmd.load_mycmd_lib_support_lib "command"
mycmd.load_mycmd_lib_support_lib "command-group"

# ------------------------------------------------------------------------------
# Configuring the MyCmd top-level command group
function mycmd:discover_command_groups_and_commands_callback() {
    local -r full_path="${1}"
    local -r fully_qualifed_name="${2}"
    # The directories are not currently used
    local -n _dirs_ref="${3}"
    local -n files_ref="${4}"

    if ! mycmd:command_group.register_command_group "${full_path}" "${fully_qualifed_name}"; then
        mycmd.log "Error loading command group '${fully_qualifed_name}' from '${full_path}'."
        return 1
    fi

    local f
    local file_fully_qualified_name
    local file_name
    for f in "${files_ref[@]}"; do
        if ! file_name="$(basename "${f}")"; then
            mycmd.debug "Error getting basename of '${f}'."
            return 1
        fi

        file_fully_qualified_name="${fully_qualifed_name}/${file_name}"

        if ! mycmd:command.register_command "${f}" "${file_fully_qualified_name}"; then
            mycmd.log "Error loading command '${f}'."
            return 1
        fi
    done
}

function mycmd:discover_command_groups_and_commands() {
    mycmd:pathname.walk_path "mycmd" mycmd:discover_command_groups_and_commands_callback
}

mycmd:discover_command_groups_and_commands

# ------------------------------------------------------------------------------
# Finalization and Clean Up
mycmd._protect_mycmd_lib
mycmd.run_startup_deferreds

mycmd.trace "${_MYCMD_LIB_SELF_FILE} sourcing complete."
