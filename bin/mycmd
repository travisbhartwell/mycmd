#!/usr/bin/env bash
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

set -o nounset -o errexit -o errtrace -o pipefail

shopt -s inherit_errexit

declare -A _MYCMD_LAUNCHER_DISPATCH=()

declare -a _MYCMD_LAUNCHER_VARS_TO_CLEANUP=("_MYCMD_LAUNCHER_SELF_FILE" "_MYCMD_LAUNCHER_VARS_TO_CLEANUP")

function mycmd_launcher.set_mycmd_system_environment() {
    _MYCMD_LAUNCHER_SELF_FILE="${BASH_SOURCE[0]}"
    MYCMD_BIN_DIR=$(cd "$(dirname "${_MYCMD_LAUNCHER_SELF_FILE}")" &>/dev/null && pwd -P)
    readonly MYCMD_BIN_DIR
    export MYCMD_BIN_DIR

    if [[ -z "${MYCMD_SYSTEM_BASE_DIR-}" || ! -d "${MYCMD_SYSTEM_BASE_DIR}" ]]; then
        local -r system_base_dir_relative="${MYCMD_BIN_DIR}/../mycmd"

        if [[ ! -d "${system_base_dir_relative}" ]]; then
            echo >&2 "Cannot find MyCmd system library base directory in the standard location."
            exit 1
        fi

        if ! MYCMD_SYSTEM_BASE_DIR=$(cd "${system_base_dir_relative}" &>/dev/null && pwd -P); then
            echo >&2 "MYCMD_SYSTEM_BASE_DIR cannot be set."
            exit 1
        fi

        readonly MYCMD_SYSTEM_BASE_DIR
        export MYCMD_SYSTEM_BASE_DIR
    fi

    if [[ ! -e "${MYCMD_SYSTEM_BASE_DIR}/mycmd-lib" ]]; then
        echo >&2 "MYCMD_SYSTEM_BASE_DIR setting of ${MYCMD_SYSTEM_BASE_DIR} invalid, as required file mycmd-lib is missing."
        exit 1
    fi

    if [[ -z "${MYCMD_VENDOR_DIR-}" || ! -d "${MYCMD_VENDOR_DIR}" ]]; then
        local -r vendor_dir_relative="${MYCMD_BIN_DIR}/../vendor"

        if [[ ! -d "${vendor_dir_relative}" ]]; then
            echo >&2 "Cannot find MyCmd vendor library directory in the standard location."
            exit 1
        fi

        if ! MYCMD_VENDOR_DIR=$(cd "${vendor_dir_relative}" &>/dev/null && pwd -P); then
            echo >&2 "MYCMD_VENDOR_DIR cannot be set."
            exit 1
        fi

        readonly MYCMD_VENDOR_DIR
        export MYCMD_VENDOR_DIR
    fi
}

function mycmd_launcher.set_mycmd_user_environment() {
    if [[ -z "${MYCMD_USER_BASE_DIR-}" ]]; then
        MYCMD_USER_BASE_DIR="${HOME}/mycmd"
    fi

    if [[ ! -d "${MYCMD_USER_BASE_DIR}" ]]; then
        echo >&2 "Required MyCmd user library directory, '${MYCMD_USER_BASE_DIR}' not found."
        exit 1
    fi

    readonly MYCMD_USER_BASE_DIR
    export MYCMD_USER_BASE_DIR
}

# ------------------------------------------------------------------------------
# Set MYCMD_SYSTEM_BASE_DIR and MYCMD_USER_BASE_DIR
#
#   MYCMD_SYSTEM_BASE_DIR defaults to the mycmd directory that is parallel to
#   the bin directory that this mycmd script is in; have MYCMD_SYSTEM_BASE_DIR
#   set before launching to override this, however this directory must include
#   the mycmd-lib file that is included in the MyCmd distribution.
#
#   MYCMD_USER_BASE_DIR defaults to ~/mycmd; have MYCMD_USER_BASE_DIR set before
#   launching to override this.
#
# ------------------------------------------------------------------------------
# Validate MYCMD_SYSTEM_BASE_DIR setting and source MyCmd Base Library
mycmd_launcher.set_mycmd_system_environment
mycmd_launcher.set_mycmd_user_environment

# shellcheck source=./mycmd/mycmd-lib
source "${MYCMD_SYSTEM_BASE_DIR}/mycmd-lib" "${@}"

function mycmd_launcher.clean_environment() {
    # First, unset any launcher local functions
    local -a launcher_functions
    # shellcheck disable=SC2312
    readarray -t launcher_functions < <(compgen -A function | grep "^mycmd_launcher\.")

    local f
    for f in "${launcher_functions[@]}"; do
        mycmd.trace "Unsetting function '${f}'."
        unset -f "${f}"
    done

    # Then, unset any variables not meant to be inherited
    local v
    for v in "${_MYCMD_LAUNCHER_VARS_TO_CLEANUP[@]}"; do
        mycmd.trace "Unsetting launcher variable '${v}'"
        unset -v "${v}"
    done
}

function mycmd_launcher.usage() {
    local -r mycmd_name=$(basename "${_MYCMD_LAUNCHER_SELF_FILE}")

    mycmd.output "\nUsage:"
    mycmd.output "\n${mycmd_name} [-h | --help] [-v | --version]"
    mycmd.output "\n${mycmd_name} <command_group>... [-h | --help] [-v | --version] [arguments]"
    mycmd.output "\n  See the help for the individual command groups for further details."
    mycmd.output "\n${mycmd_name} <command_group>... <command> [-h | --help] [-v | --version] [arguments]"
    mycmd.output "\n  See the help for the individual sub commands for further details."
    mycmd.output "\nThe following environment variables are recognized, if set:\n"
    mycmd.output "MYCMD_SYSTEM_BASE_DIR    - the base directory for system defined MyCmd Command Groups."
    mycmd.output "MYCMD_USER_BASE_DIR      - the base directory for user defined MyCmd Command Groups. Defaults to ${HOME}/mycmd if not set. Required to exist."
    mycmd.output "MYCMD_SHELL_TRACE        - enables Bash's xtrace (set -x) for the executing command."
    mycmd.output "MYCMD_SHELL_VERBOSE      - enables Bash's verbose mode (set -v) for the executing command."
    mycmd.output "MYCMD_DEBUG              - enables output of debug logging in the executing command."
    mycmd.output "MYCMD_TRACE              - enables output of trace logging in the executing command."
}

function mycmd_launcher.main() {
    # Manually run the startup deferreds for the launcher
    mycmd.run_startup_deferreds

    if (($# == 0)); then
        mycmd_launcher.usage
        exit 0
    fi

    mycmd_launcher.clean_environment

    mycmd_launcher.usage

    if [[ "${1}" = /* ]] && [[ -e "${1}" ]]; then
        mycmd.execute_command "${@}"
    else
        mycmd.execute_command "${MYCMD_SYSTEM_BASE_DIR}/logging/log-both" "${@}"
    fi
}

mycmd_launcher.main "${@}"
