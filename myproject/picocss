#!/usr/bin/env -S mycmd myproject run
# -*- mode: shell-script; sh-shell: bash; sh-basic-offset: 4; sh-indentation: 4; coding: utf-8 -*-
# shellcheck shell=bash

set -o nounset -o errexit -o errtrace -o pipefail

# --------------------------------------------------------------------------------------------------
# Tasks related to PicoCSS
myproject.register_task_definition_file_description "Tasks related to PicoCSS for the project"

mycmd.trace "The following variables set by the main task definition file are used here:"
# shellcheck disable=SC2154
mycmd.trace "- CSS_DIR:     ${CSS_DIR}"
# shellcheck disable=SC2154
mycmd.trace "- WORKING_DIR: ${WORKING_DIR}"

# Based on https://picocss.com/docs
readonly PICO_CSS_GITHUB_URL=git@github.com:picocss/pico.git
readonly PICO_CSS_FULL_PATH="${CSS_DIR}/pico.min.css"
readonly PICO_CSS_DOWNLOAD_BASE="https://github.com/picocss/pico/archive/refs/tags"

mycmd.trace "Additional variables set:"
mycmd.trace "- PICO_CSS_GITHUB_URL:    ${PICO_CSS_GITHUB_URL}"
mycmd.trace "- PICO_CSS_FULL_PATH:     ${PICO_CSS_FULL_PATH}"
mycmd.trace "- PICO_CSS_DOWNLOAD_BASE: ${PICO_CSS_DOWNLOAD_BASE}"

mycmd.defer_at_startup mycmd.init_bin git
mycmd.defer_at_startup mycmd.init_bin sed
function get_latest_release() {
    mycmd.bin_execute git ls-remote --tags --sort="-version:refname" "${PICO_CSS_GITHUB_URL}" \
        | head -n1 \
        | mycmd.bin_execute sed -r -n 's/.*refs\/tags\/v(.*)/\1/p'
}

mycmd.defer_at_startup mycmd.init_bin sed
function get_current_used_picocss_version() {
    if [[ ! -e "${PICO_CSS_FULL_PATH}" ]]; then
        echo "missing"
        return 0
    fi

    mycmd.bin_execute sed -r -n 's/.*Pico CSS .* v([^ ]+).*/\1/p' "${PICO_CSS_FULL_PATH}"
}

mycmd.defer_at_startup mycmd.init_bin curl
function update_pico_css_if_needed() {
    local latest
    if ! latest=$(get_latest_release); then
        mycmd.error_output "Error getting latest release from GitHub"
        return 1
    fi
    readonly latest

    local current
    if ! current=$(get_current_used_picocss_version); then
        mycmd.error_output "Error getting currently used Pico CSS release"
        return 1
    fi
    readonly current

    if [[ "${latest}" = "${current}" ]]; then
        myproject.output_only_if_not_quiet "Already at the latest version"
        return 0
    fi

    cd "${WORKING_DIR}"
    local -r tarball="v${latest}.tar.gz"
    local -r download_url="${PICO_CSS_DOWNLOAD_BASE}/${tarball}"
    myproject.verbose_output "Downloading PicoCSS from ${download_url}."

    if ! curl -O -sSL "${download_url}"; then
        mycmd.error_output "Error downloading latest PicoCSS version ${latest} from ${download_url}."
        return 1
    fi

    if ! tar xf "${tarball}"; then
        mycmd.error_output "Error extracting tarball from ${WORKING_DIR}/${tarball}."
        return 1
    fi

    local -r src_path="${WORKING_DIR}/pico-${latest}/css/pico.min.css"

    if ! cp "${src_path}" "${CSS_DIR}"; then
        mycmd.error_output "Error copying updated CSS file"
        return 1
    fi
}

myproject.register_task update-if-needed update_pico_css_if_needed
myproject.register_task_description update-if-needed "Update PicoCSS from upstream if needed."

mycmd.trace "Finished loading the PicoCSS task definition file."
